syntax = "proto3";
package sgenetwork.sge.market;

import "gogoproto/gogo.proto";
import "sge/market/odds.proto";

option go_package = "github.com/sge-network/sge/x/market/types";

// Market is the representation of the market to be stored in
// the market state.
message Market {
  // uid is the universal unique identifier of the market.
  string uid = 1 [
    (gogoproto.customname) = "UID",
    (gogoproto.jsontag) = "uid",
    json_name = "uid"
  ];
  // start_ts is the start timestamp of the market.
  uint64 start_ts = 2 [
    (gogoproto.customname) = "StartTS",
    (gogoproto.jsontag) = "start_ts",
    json_name = "start_ts"
  ];
  // end_ts is the end timestamp of the market.
  uint64 end_ts = 3 [
    (gogoproto.customname) = "EndTS",
    (gogoproto.jsontag) = "end_ts",
    json_name = "end_ts"
  ];
  // odds is the list of odds of the market.
  repeated Odds odds = 4;
  // winner_odds_uids is the list of winner odds universal unique identifiers.
  repeated string winner_odds_uids = 5 [
    (gogoproto.customname) = "WinnerOddsUIDs",
    (gogoproto.jsontag) = "winner_odds_uids",
    json_name = "winner_odds_uids"
  ];
  // status is the current status of the market.
  MarketStatus status = 6;
  // resolution_ts is the timestamp of the resolution of market.
  uint64 resolution_ts = 7 [
    (gogoproto.customname) = "ResolutionTS",
    (gogoproto.jsontag) = "resolution_ts",
    json_name = "resolution_ts"
  ];
  // creator is the address of the creator of market.
  string creator = 8;
  // meta contains human-readable metadata of the market.
  string meta = 9;
  // book_uid is the unique identifier corresponding to the book
  string book_uid = 10 [
    (gogoproto.customname) = "BookUID",
    (gogoproto.jsontag) = "book_uid",
    json_name = "book_uid"
  ];
  // price_stats is statistics related to the price fluctuation.
  PriceStats price_stats = 11;
}

// PriceStats is a type for the sge price fluctuation definitions and statistics.
message PriceStats {
  // sge_price is the price of sge token in dollars during resolution.
  string resolution_sge_price = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  // price_reimbursement is the sum of price lock reimbursement that should be paid after settlement.
  string price_reimbursement = 2 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  // max_price_reimbursement is maximum price reimbursement allowed for the price reimbursement.
  string max_price_reimbursement = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

// MarketStatus is the market status enumeration
enum MarketStatus {
  // unspecified market
  MARKET_STATUS_UNSPECIFIED = 0;
  // market is active
  MARKET_STATUS_ACTIVE = 1;
  // market is inactive
  MARKET_STATUS_INACTIVE = 2;
  // market is canceled
  MARKET_STATUS_CANCELED = 3;
  // market is aborted
  MARKET_STATUS_ABORTED = 4;
  // result of the market is declared
  MARKET_STATUS_RESULT_DECLARED = 5;
}
