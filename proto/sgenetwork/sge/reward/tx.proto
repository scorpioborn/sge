syntax = "proto3";

package sgenetwork.sge.reward;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "amino/amino.proto";
import "sgenetwork/sge/reward/params.proto";

option go_package = "github.com/sge-network/sge/x/reward/types";

// Msg defines the Msg service.
service Msg {
  // SetPromoterConf is a method to set the configurations of a promoter.
  rpc SetPromoterConf(MsgSetPromoterConf) returns (MsgSetPromoterConfResponse);
  // CreatePromoter is a method to create a promoter
  rpc CreatePromoter(MsgCreatePromoter) returns (MsgCreatePromoterResponse);
  // CreateCampaign is a method to create a campaign
  rpc CreateCampaign(MsgCreateCampaign) returns (MsgCreateCampaignResponse);
  // UpdateCampaign is a method to update campaign
  rpc UpdateCampaign(MsgUpdateCampaign) returns (MsgUpdateCampaignResponse);
  // WithdrawCampaignFunds is method to withdraw funds from the campaign
  rpc WithdrawFunds(MsgWithdrawFunds) returns (MsgWithdrawFundsResponse);
  // GrantReward is method to allocate rewards
  rpc GrantReward(MsgGrantReward) returns (MsgGrantRewardResponse);
  // UpdateParams defines a governance operation for updating the x/ovm module
  // parameters. The authority is defined in the keeper.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse) {
    option (cosmos_proto.method_added_in) = "sge-network 1.7.1";
  }
}

// MsgCreatePromoter is msg to create a promoter.
message MsgCreatePromoter {
  // creator is the address of message signer account.
  string creator = 1;
  // ticket is the payload data.
  string ticket = 2;
}

// MsgCreatePromoterResponse promoter create message response type.
message MsgCreatePromoterResponse {}

// MsgSetPromoterConf is msg to set promoter configuration.
message MsgSetPromoterConf {
  // creator is the address of message signer account.
  string creator = 1;
  // uid is the unique identifier of the promoter.
  string uid = 2;
  // ticket is the payload data.
  string ticket = 3;
}

// MsgCreateCampaignResponse campaign create message response type.
message MsgSetPromoterConfResponse {}

// MsgCreateCampaign is msg to create a reward campaign
message MsgCreateCampaign {
  // creator is the address of campaign creator account.
  string creator = 1;
  // uid is the unique identifier of the campaign.
  string uid = 2;
  // total_funds is the total funds allocated to the campaign.
  string total_funds = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"total_funds\""
  ];
  // ticket is the payload data.
  string ticket = 4;
}

// MsgCreateCampaignResponse campaign create message response type.
message MsgCreateCampaignResponse {}

// MsgUpdateCampaign is campaign update message type.
message MsgUpdateCampaign {
  // creator is the address of creator account.
  string creator = 1;
  // uid is the unique identifier of the campaign.
  string uid = 2;
  // topup_funds is the topup funds to increase the pool balance of the
  // campaign.
  string topup_funds = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"topup_funds\""
  ];
  // ticket is the payload data.
  string ticket = 4;
}

// MsgUpdateCampaignResponse campaign update message response type.
message MsgUpdateCampaignResponse {}

// MsgGrantReward is execute reward message type.
message MsgGrantReward {
  // creator is the address of creator account.
  string creator = 1;
  // uid is the unique identifier of the reward.
  string uid = 2;
  // campaign_uid is the unique identifier of the reward campaign.
  string campaign_uid = 3;
  // ticket is the payload data.
  string ticket = 4;
}

// MsgGrantSignupRewardResponse execute signup reward message response type.
message MsgGrantRewardResponse {}

// MsgWithdrawFunds is withdraw funds message type.
message MsgWithdrawFunds {
  // creator is the address of creator account.
  string creator = 1;
  // uid is the unique identifier of the reward campaign.
  string uid = 2;
  // ticket is the payload data.
  string ticket = 3;
  // amount is the requested withdrawal amount
  string amount = 4 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

// MsgWithdrawFundsResponse withdraw funds message response type.
message MsgWithdrawFundsResponse {}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos_proto.message_added_in) = "sge-network 1.7.1";
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the x/bet parameters.
  Params params = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {
  option (cosmos_proto.message_added_in) = "sge-network 1.7.1";
}