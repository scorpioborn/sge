// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sge/legacy/bet/v1beta/ticket.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	legacy "github.com/sge-network/sge/types/legacy"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// WagerTicketPayload indicates data of bet placement ticket.
type WagerTicketPayload struct {
	// selected_odds is the user-selected odds to place bet.
	SelectedOdds *BetOdds `protobuf:"bytes,1,opt,name=selected_odds,json=selectedOdds,proto3" json:"selected_odds,omitempty"`
	// kyc_data contains the details of user kyc.
	KycData legacy.KycDataPayload `protobuf:"bytes,2,opt,name=kyc_data,json=kycData,proto3" json:"kyc_data"`
	// all odds for the selected market.
	AllOdds []*BetOddsCompact `protobuf:"bytes,4,rep,name=all_odds,json=allOdds,proto3" json:"all_odds,omitempty"`
	// meta is metadata for bet placement
	Meta MetaData `protobuf:"bytes,5,opt,name=meta,proto3" json:"meta"`
	// context contains the data from services and just for processing purpose.
	Context string `protobuf:"bytes,6,opt,name=context,proto3" json:"context,omitempty"`
}

func (m *WagerTicketPayload) Reset()         { *m = WagerTicketPayload{} }
func (m *WagerTicketPayload) String() string { return proto.CompactTextString(m) }
func (*WagerTicketPayload) ProtoMessage()    {}
func (*WagerTicketPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2eb910bc5b6fae8, []int{0}
}
func (m *WagerTicketPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WagerTicketPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WagerTicketPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WagerTicketPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WagerTicketPayload.Merge(m, src)
}
func (m *WagerTicketPayload) XXX_Size() int {
	return m.Size()
}
func (m *WagerTicketPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_WagerTicketPayload.DiscardUnknown(m)
}

var xxx_messageInfo_WagerTicketPayload proto.InternalMessageInfo

func (m *WagerTicketPayload) GetSelectedOdds() *BetOdds {
	if m != nil {
		return m.SelectedOdds
	}
	return nil
}

func (m *WagerTicketPayload) GetKycData() legacy.KycDataPayload {
	if m != nil {
		return m.KycData
	}
	return legacy.KycDataPayload{}
}

func (m *WagerTicketPayload) GetAllOdds() []*BetOddsCompact {
	if m != nil {
		return m.AllOdds
	}
	return nil
}

func (m *WagerTicketPayload) GetMeta() MetaData {
	if m != nil {
		return m.Meta
	}
	return MetaData{}
}

func (m *WagerTicketPayload) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func init() {
	proto.RegisterType((*WagerTicketPayload)(nil), "sge.legacy.bet.WagerTicketPayload")
}

func init() {
	proto.RegisterFile("sge/legacy/bet/v1beta/ticket.proto", fileDescriptor_e2eb910bc5b6fae8)
}

var fileDescriptor_e2eb910bc5b6fae8 = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x41, 0x4b, 0xeb, 0x40,
	0x10, 0xc7, 0x93, 0xbe, 0xbe, 0xb6, 0x2f, 0x7d, 0xef, 0x1d, 0x82, 0x60, 0xe8, 0x21, 0x0d, 0xc5,
	0x43, 0x2f, 0x4d, 0xb0, 0x9e, 0x04, 0x0f, 0x52, 0x05, 0x0f, 0x22, 0x4a, 0x10, 0x04, 0x2f, 0x65,
	0xb2, 0x3b, 0xac, 0x25, 0xdb, 0x6e, 0xe9, 0x8e, 0xda, 0x7c, 0x0b, 0xbf, 0x80, 0xdf, 0xa7, 0xc7,
	0x1e, 0x3d, 0x89, 0xb4, 0x5f, 0x44, 0xb2, 0x69, 0xa0, 0x8a, 0xbd, 0xcd, 0x24, 0xbf, 0x99, 0xdf,
	0x7f, 0x77, 0x9d, 0x8e, 0x16, 0x18, 0x49, 0x14, 0xc0, 0xb2, 0x28, 0x41, 0x8a, 0x9e, 0x0e, 0x13,
	0x24, 0x88, 0x68, 0xc4, 0x52, 0xa4, 0x70, 0x3a, 0x53, 0xa4, 0xdc, 0xff, 0x5a, 0x60, 0x58, 0x30,
	0x61, 0x82, 0xd4, 0xda, 0x13, 0x4a, 0x28, 0xf3, 0x2b, 0xca, 0xab, 0x82, 0x6a, 0xb5, 0x7f, 0xde,
	0x94, 0x94, 0x6b, 0x5a, 0x07, 0x3b, 0x81, 0xa1, 0xe2, 0x5c, 0x6f, 0xa8, 0x60, 0x8b, 0xa2, 0x6c,
	0x8a, 0x25, 0x96, 0x66, 0xac, 0x20, 0x3a, 0xaf, 0x15, 0xc7, 0xbd, 0x03, 0x81, 0xb3, 0x5b, 0x13,
	0xf2, 0x06, 0x32, 0xa9, 0x80, 0xbb, 0x27, 0xce, 0x3f, 0x8d, 0x12, 0x19, 0x21, 0x37, 0xfb, 0x3c,
	0x3b, 0xb0, 0xbb, 0xcd, 0xfe, 0x7e, 0xf8, 0x35, 0x7d, 0x38, 0x40, 0xba, 0xe6, 0x5c, 0xc7, 0x7f,
	0x4b, 0x3a, 0xef, 0xdc, 0x53, 0xa7, 0x91, 0x66, 0x6c, 0xc8, 0x81, 0xc0, 0xab, 0x98, 0xc1, 0xf6,
	0xf6, 0x60, 0x9e, 0x24, 0xbc, 0xcc, 0xd8, 0x39, 0x10, 0x6c, 0x84, 0x83, 0xea, 0xe2, 0xbd, 0x6d,
	0xc5, 0xf5, 0xb4, 0xf8, 0xea, 0x1e, 0x3b, 0x0d, 0x90, 0xb2, 0x50, 0x57, 0x83, 0x5f, 0xdd, 0x66,
	0xdf, 0xdf, 0xa1, 0x3e, 0x53, 0xe3, 0x29, 0x30, 0x8a, 0xeb, 0x20, 0xa5, 0x91, 0xf7, 0x9d, 0xea,
	0x18, 0x09, 0xbc, 0xdf, 0x46, 0xec, 0x7d, 0x1f, 0xbb, 0x42, 0x82, 0x5c, 0xb1, 0x31, 0x1a, 0xd6,
	0xf5, 0x9c, 0x3a, 0x53, 0x13, 0xc2, 0x39, 0x79, 0xb5, 0xc0, 0xee, 0xfe, 0x89, 0xcb, 0x76, 0x70,
	0xb1, 0x58, 0xf9, 0xf6, 0x72, 0xe5, 0xdb, 0x1f, 0x2b, 0xdf, 0x7e, 0x59, 0xfb, 0xd6, 0x72, 0xed,
	0x5b, 0x6f, 0x6b, 0xdf, 0xba, 0xef, 0x89, 0x11, 0x3d, 0x3c, 0x26, 0x21, 0x53, 0xe3, 0x48, 0x0b,
	0xec, 0x4d, 0x90, 0x9e, 0xd5, 0x2c, 0xcd, 0xeb, 0x68, 0xbe, 0xfd, 0x34, 0xf9, 0x71, 0x75, 0x52,
	0x33, 0xf7, 0x7d, 0xf4, 0x19, 0x00, 0x00, 0xff, 0xff, 0x7c, 0x82, 0x86, 0x96, 0x24, 0x02, 0x00,
	0x00,
}

func (m *WagerTicketPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WagerTicketPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WagerTicketPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Context) > 0 {
		i -= len(m.Context)
		copy(dAtA[i:], m.Context)
		i = encodeVarintTicket(dAtA, i, uint64(len(m.Context)))
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTicket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.AllOdds) > 0 {
		for iNdEx := len(m.AllOdds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllOdds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTicket(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size, err := m.KycData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTicket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.SelectedOdds != nil {
		{
			size, err := m.SelectedOdds.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTicket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTicket(dAtA []byte, offset int, v uint64) int {
	offset -= sovTicket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WagerTicketPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SelectedOdds != nil {
		l = m.SelectedOdds.Size()
		n += 1 + l + sovTicket(uint64(l))
	}
	l = m.KycData.Size()
	n += 1 + l + sovTicket(uint64(l))
	if len(m.AllOdds) > 0 {
		for _, e := range m.AllOdds {
			l = e.Size()
			n += 1 + l + sovTicket(uint64(l))
		}
	}
	l = m.Meta.Size()
	n += 1 + l + sovTicket(uint64(l))
	l = len(m.Context)
	if l > 0 {
		n += 1 + l + sovTicket(uint64(l))
	}
	return n
}

func sovTicket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTicket(x uint64) (n int) {
	return sovTicket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WagerTicketPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTicket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WagerTicketPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WagerTicketPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectedOdds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTicket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTicket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelectedOdds == nil {
				m.SelectedOdds = &BetOdds{}
			}
			if err := m.SelectedOdds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KycData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTicket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTicket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KycData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllOdds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTicket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTicket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllOdds = append(m.AllOdds, &BetOddsCompact{})
			if err := m.AllOdds[len(m.AllOdds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTicket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTicket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTicket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTicket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTicket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTicket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTicket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTicket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTicket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTicket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTicket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTicket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTicket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTicket = fmt.Errorf("proto: unexpected end of group")
)
