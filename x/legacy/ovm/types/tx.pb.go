// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sge/legacy/ovm/v1beta/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgPubkeysChangeProposalRequest is the type of request for modification of
// public keys.
type MsgSubmitPubkeysChangeProposalRequest struct {
	// creator is the account address of the creator.
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// ticket is the jwt ticket data.
	Ticket string `protobuf:"bytes,2,opt,name=ticket,proto3" json:"ticket,omitempty"`
}

func (m *MsgSubmitPubkeysChangeProposalRequest) Reset()         { *m = MsgSubmitPubkeysChangeProposalRequest{} }
func (m *MsgSubmitPubkeysChangeProposalRequest) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitPubkeysChangeProposalRequest) ProtoMessage()    {}
func (*MsgSubmitPubkeysChangeProposalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_633ba242b03a5b58, []int{0}
}
func (m *MsgSubmitPubkeysChangeProposalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitPubkeysChangeProposalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitPubkeysChangeProposalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitPubkeysChangeProposalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitPubkeysChangeProposalRequest.Merge(m, src)
}
func (m *MsgSubmitPubkeysChangeProposalRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitPubkeysChangeProposalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitPubkeysChangeProposalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitPubkeysChangeProposalRequest proto.InternalMessageInfo

func (m *MsgSubmitPubkeysChangeProposalRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSubmitPubkeysChangeProposalRequest) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

// MsgPubkeysChangeProposalResponse is the type of response for modification of
// public keys.
type MsgSubmitPubkeysChangeProposalResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *MsgSubmitPubkeysChangeProposalResponse) Reset() {
	*m = MsgSubmitPubkeysChangeProposalResponse{}
}
func (m *MsgSubmitPubkeysChangeProposalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitPubkeysChangeProposalResponse) ProtoMessage()    {}
func (*MsgSubmitPubkeysChangeProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_633ba242b03a5b58, []int{1}
}
func (m *MsgSubmitPubkeysChangeProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitPubkeysChangeProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitPubkeysChangeProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitPubkeysChangeProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitPubkeysChangeProposalResponse.Merge(m, src)
}
func (m *MsgSubmitPubkeysChangeProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitPubkeysChangeProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitPubkeysChangeProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitPubkeysChangeProposalResponse proto.InternalMessageInfo

func (m *MsgSubmitPubkeysChangeProposalResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// MsgVotePubkeysChangeRequest is the type of request to vote on the
// modification of public keys proposal.
type MsgVotePubkeysChangeRequest struct {
	// creator is the account address of the creator.
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// ticket is the jwt ticket data.
	Ticket string `protobuf:"bytes,2,opt,name=ticket,proto3" json:"ticket,omitempty"`
	// voter_key_index is the public key index of the voter in the current list
	// of public keys in the vault.
	VoterKeyIndex uint32 `protobuf:"varint,3,opt,name=voter_key_index,json=voterKeyIndex,proto3" json:"voter_key_index,omitempty"`
}

func (m *MsgVotePubkeysChangeRequest) Reset()         { *m = MsgVotePubkeysChangeRequest{} }
func (m *MsgVotePubkeysChangeRequest) String() string { return proto.CompactTextString(m) }
func (*MsgVotePubkeysChangeRequest) ProtoMessage()    {}
func (*MsgVotePubkeysChangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_633ba242b03a5b58, []int{2}
}
func (m *MsgVotePubkeysChangeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVotePubkeysChangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVotePubkeysChangeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVotePubkeysChangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVotePubkeysChangeRequest.Merge(m, src)
}
func (m *MsgVotePubkeysChangeRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgVotePubkeysChangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVotePubkeysChangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVotePubkeysChangeRequest proto.InternalMessageInfo

func (m *MsgVotePubkeysChangeRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgVotePubkeysChangeRequest) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

func (m *MsgVotePubkeysChangeRequest) GetVoterKeyIndex() uint32 {
	if m != nil {
		return m.VoterKeyIndex
	}
	return 0
}

// MsgVotePubkeysChangeResponse is the type of response vote for public keys
// modification.
type MsgVotePubkeysChangeResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *MsgVotePubkeysChangeResponse) Reset()         { *m = MsgVotePubkeysChangeResponse{} }
func (m *MsgVotePubkeysChangeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVotePubkeysChangeResponse) ProtoMessage()    {}
func (*MsgVotePubkeysChangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_633ba242b03a5b58, []int{3}
}
func (m *MsgVotePubkeysChangeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVotePubkeysChangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVotePubkeysChangeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVotePubkeysChangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVotePubkeysChangeResponse.Merge(m, src)
}
func (m *MsgVotePubkeysChangeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVotePubkeysChangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVotePubkeysChangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVotePubkeysChangeResponse proto.InternalMessageInfo

func (m *MsgVotePubkeysChangeResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the x/bet parameters.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_633ba242b03a5b58, []int{4}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_633ba242b03a5b58, []int{5}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSubmitPubkeysChangeProposalRequest)(nil), "sge.legacy.ovm.MsgSubmitPubkeysChangeProposalRequest")
	proto.RegisterType((*MsgSubmitPubkeysChangeProposalResponse)(nil), "sge.legacy.ovm.MsgSubmitPubkeysChangeProposalResponse")
	proto.RegisterType((*MsgVotePubkeysChangeRequest)(nil), "sge.legacy.ovm.MsgVotePubkeysChangeRequest")
	proto.RegisterType((*MsgVotePubkeysChangeResponse)(nil), "sge.legacy.ovm.MsgVotePubkeysChangeResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "sge.legacy.ovm.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "sge.legacy.ovm.MsgUpdateParamsResponse")
}

func init() { proto.RegisterFile("sge/legacy/ovm/v1beta/tx.proto", fileDescriptor_633ba242b03a5b58) }

var fileDescriptor_633ba242b03a5b58 = []byte{
	// 561 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xce, 0x35, 0x52, 0x4a, 0x8e, 0x96, 0x2a, 0x56, 0x69, 0x4d, 0x8a, 0xdc, 0xc8, 0x88, 0x52,
	0x15, 0x62, 0x93, 0x20, 0x0a, 0x64, 0x23, 0x0c, 0x08, 0xa1, 0x48, 0x91, 0x2b, 0x18, 0x58, 0x22,
	0xc7, 0x39, 0x5d, 0xac, 0xd4, 0x3e, 0x73, 0xef, 0x1c, 0xe2, 0x91, 0x4e, 0x1d, 0xe1, 0x2f, 0x60,
	0x85, 0xad, 0x43, 0xff, 0x88, 0x8a, 0xa9, 0xea, 0xc4, 0x84, 0x50, 0x32, 0xf4, 0xdf, 0x40, 0xfe,
	0x11, 0x9a, 0x04, 0x43, 0xca, 0xc0, 0x62, 0xdf, 0x7b, 0xef, 0x7b, 0xdf, 0x7d, 0x9f, 0xde, 0xd3,
	0x61, 0x05, 0x28, 0xd1, 0xf7, 0x09, 0x35, 0xad, 0x40, 0x67, 0x7d, 0x47, 0xef, 0x57, 0xda, 0x44,
	0x98, 0xba, 0x18, 0x68, 0x1e, 0x67, 0x82, 0x49, 0xd7, 0x80, 0x12, 0x2d, 0xae, 0x6b, 0xac, 0xef,
	0x14, 0x0b, 0xa6, 0x63, 0xbb, 0x4c, 0x8f, 0xbe, 0x31, 0xa4, 0xb8, 0x6e, 0x31, 0x70, 0x18, 0xe8,
	0x0e, 0x50, 0xbd, 0x5f, 0x09, 0x7f, 0x49, 0xe1, 0x46, 0x5c, 0x68, 0x45, 0x91, 0x1e, 0x07, 0x49,
	0x69, 0x95, 0x32, 0xca, 0xe2, 0x7c, 0x78, 0x4a, 0xb2, 0x6a, 0xba, 0x18, 0xcf, 0xe4, 0xa6, 0x93,
	0x74, 0xaa, 0xef, 0x11, 0xbe, 0xdd, 0x00, 0xba, 0xe7, 0xb7, 0x1d, 0x5b, 0x34, 0xfd, 0x76, 0x8f,
	0x04, 0xf0, 0xac, 0x6b, 0xba, 0x94, 0x34, 0x39, 0xf3, 0x18, 0x98, 0xfb, 0x06, 0x79, 0xeb, 0x13,
	0x10, 0x52, 0x15, 0x2f, 0x5a, 0x9c, 0x98, 0x82, 0x71, 0x19, 0x95, 0xd0, 0x76, 0xbe, 0x2e, 0x9f,
	0x1d, 0x97, 0x57, 0x13, 0x19, 0x4f, 0x3b, 0x1d, 0x4e, 0x00, 0xf6, 0x04, 0xb7, 0x5d, 0x6a, 0x8c,
	0x81, 0xd2, 0x1a, 0xce, 0x09, 0xdb, 0xea, 0x11, 0x21, 0x2f, 0x84, 0x2d, 0x46, 0x12, 0xd5, 0x96,
	0x0e, 0xce, 0x8f, 0x76, 0xc6, 0x28, 0xb5, 0x8e, 0xb7, 0xe6, 0x49, 0x00, 0x8f, 0xb9, 0x40, 0x24,
	0x19, 0x2f, 0x82, 0x6f, 0x59, 0x04, 0x20, 0xd2, 0x70, 0xc5, 0x18, 0x87, 0xea, 0x27, 0x84, 0x37,
	0x1a, 0x40, 0x5f, 0x33, 0x41, 0xa6, 0x28, 0xfe, 0x83, 0x7a, 0x69, 0x0b, 0xaf, 0xf4, 0x99, 0x20,
	0xbc, 0xd5, 0x23, 0x41, 0xcb, 0x76, 0x3b, 0x64, 0x20, 0x67, 0x4b, 0x68, 0x7b, 0xd9, 0x58, 0x8e,
	0xd2, 0x2f, 0x49, 0xf0, 0x22, 0x4c, 0xce, 0xb8, 0x7c, 0x8c, 0x6f, 0xa6, 0x0b, 0x9c, 0xeb, 0xed,
	0x0b, 0xc2, 0x2b, 0x0d, 0xa0, 0xaf, 0xbc, 0x8e, 0x29, 0x48, 0x33, 0x9a, 0x9e, 0xb4, 0x8b, 0xf3,
	0xa6, 0x2f, 0xba, 0x8c, 0xdb, 0x22, 0x98, 0xeb, 0xe8, 0x02, 0x2a, 0x3d, 0xc1, 0xb9, 0x78, 0xfe,
	0x91, 0xa7, 0xab, 0xd5, 0x35, 0x6d, 0x7a, 0x23, 0xb5, 0x98, 0xbf, 0x9e, 0x3f, 0xf9, 0xbe, 0x99,
	0xf9, 0x7c, 0x7e, 0xb4, 0x83, 0x8c, 0xa4, 0xa1, 0x76, 0xeb, 0xec, 0xb8, 0x5c, 0x00, 0x4a, 0xca,
	0x2e, 0x11, 0xef, 0x18, 0xef, 0x95, 0x2a, 0xda, 0x23, 0xad, 0x12, 0x7a, 0xbc, 0xe0, 0x57, 0xef,
	0xe3, 0xf5, 0x19, 0xa9, 0x63, 0x83, 0xb5, 0xeb, 0xa9, 0xfd, 0xd5, 0x83, 0x2c, 0xce, 0x36, 0x80,
	0x4a, 0x1f, 0x11, 0xde, 0xf8, 0xcb, 0x0e, 0x48, 0x0f, 0x67, 0x95, 0x5e, 0x6a, 0x6d, 0x8b, 0xbb,
	0xff, 0xda, 0x16, 0xab, 0x55, 0xb3, 0x87, 0x0b, 0x48, 0x02, 0x5c, 0xf8, 0x6d, 0x60, 0xd2, 0xdd,
	0x14, 0xc6, 0x3f, 0xed, 0x5d, 0xf1, 0xde, 0xe5, 0xc0, 0x93, 0x97, 0x72, 0xbc, 0x34, 0x35, 0xea,
	0xcd, 0x14, 0x8a, 0x49, 0x40, 0xf1, 0xce, 0x1c, 0xc0, 0x2f, 0x7a, 0xf9, 0x6b, 0xda, 0x04, 0x0e,
	0x17, 0x50, 0xfd, 0xf9, 0xc9, 0x50, 0x41, 0xa7, 0x43, 0x05, 0xfd, 0x18, 0x2a, 0xe8, 0xc3, 0x48,
	0xc9, 0x9c, 0x8e, 0x94, 0xcc, 0xb7, 0x91, 0x92, 0x79, 0x53, 0xa6, 0xb6, 0xe8, 0xfa, 0x6d, 0xcd,
	0x62, 0x8e, 0x3e, 0xd1, 0x1a, 0x9e, 0xf5, 0xc1, 0xe4, 0xeb, 0x22, 0x02, 0x8f, 0x40, 0x3b, 0x17,
	0x3d, 0x2b, 0x0f, 0x7e, 0x06, 0x00, 0x00, 0xff, 0xff, 0x64, 0xe2, 0xb2, 0xcb, 0x09, 0x05, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// PubkeysChangeProposal defines a method to submit a proposal for changing
	// the allowed public keys.
	SubmitPubkeysChangeProposal(ctx context.Context, in *MsgSubmitPubkeysChangeProposalRequest, opts ...grpc.CallOption) (*MsgSubmitPubkeysChangeProposalResponse, error)
	// VotePubkeysChange defines a method to vote for a proposal for changing the
	// allowed public keys.
	VotePubkeysChange(ctx context.Context, in *MsgVotePubkeysChangeRequest, opts ...grpc.CallOption) (*MsgVotePubkeysChangeResponse, error)
	// UpdateParams defines a governance operation for updating the x/ovm module
	// parameters. The authority is defined in the keeper.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

// Deprecated: Do not use.
func (c *msgClient) SubmitPubkeysChangeProposal(ctx context.Context, in *MsgSubmitPubkeysChangeProposalRequest, opts ...grpc.CallOption) (*MsgSubmitPubkeysChangeProposalResponse, error) {
	out := new(MsgSubmitPubkeysChangeProposalResponse)
	err := c.cc.Invoke(ctx, "/sge.legacy.ovm.Msg/SubmitPubkeysChangeProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *msgClient) VotePubkeysChange(ctx context.Context, in *MsgVotePubkeysChangeRequest, opts ...grpc.CallOption) (*MsgVotePubkeysChangeResponse, error) {
	out := new(MsgVotePubkeysChangeResponse)
	err := c.cc.Invoke(ctx, "/sge.legacy.ovm.Msg/VotePubkeysChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/sge.legacy.ovm.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// PubkeysChangeProposal defines a method to submit a proposal for changing
	// the allowed public keys.
	SubmitPubkeysChangeProposal(context.Context, *MsgSubmitPubkeysChangeProposalRequest) (*MsgSubmitPubkeysChangeProposalResponse, error)
	// VotePubkeysChange defines a method to vote for a proposal for changing the
	// allowed public keys.
	VotePubkeysChange(context.Context, *MsgVotePubkeysChangeRequest) (*MsgVotePubkeysChangeResponse, error)
	// UpdateParams defines a governance operation for updating the x/ovm module
	// parameters. The authority is defined in the keeper.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SubmitPubkeysChangeProposal(ctx context.Context, req *MsgSubmitPubkeysChangeProposalRequest) (*MsgSubmitPubkeysChangeProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitPubkeysChangeProposal not implemented")
}
func (*UnimplementedMsgServer) VotePubkeysChange(ctx context.Context, req *MsgVotePubkeysChangeRequest) (*MsgVotePubkeysChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePubkeysChange not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SubmitPubkeysChangeProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitPubkeysChangeProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitPubkeysChangeProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sge.legacy.ovm.Msg/SubmitPubkeysChangeProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitPubkeysChangeProposal(ctx, req.(*MsgSubmitPubkeysChangeProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VotePubkeysChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVotePubkeysChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VotePubkeysChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sge.legacy.ovm.Msg/VotePubkeysChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VotePubkeysChange(ctx, req.(*MsgVotePubkeysChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sge.legacy.ovm.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sge.legacy.ovm.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitPubkeysChangeProposal",
			Handler:    _Msg_SubmitPubkeysChangeProposal_Handler,
		},
		{
			MethodName: "VotePubkeysChange",
			Handler:    _Msg_VotePubkeysChange_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sge/legacy/ovm/v1beta/tx.proto",
}

func (m *MsgSubmitPubkeysChangeProposalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitPubkeysChangeProposalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitPubkeysChangeProposalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ticket) > 0 {
		i -= len(m.Ticket)
		copy(dAtA[i:], m.Ticket)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Ticket)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitPubkeysChangeProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitPubkeysChangeProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitPubkeysChangeProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgVotePubkeysChangeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVotePubkeysChangeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVotePubkeysChangeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VoterKeyIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VoterKeyIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Ticket) > 0 {
		i -= len(m.Ticket)
		copy(dAtA[i:], m.Ticket)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Ticket)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVotePubkeysChangeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVotePubkeysChangeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVotePubkeysChangeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSubmitPubkeysChangeProposalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Ticket)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitPubkeysChangeProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *MsgVotePubkeysChangeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Ticket)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.VoterKeyIndex != 0 {
		n += 1 + sovTx(uint64(m.VoterKeyIndex))
	}
	return n
}

func (m *MsgVotePubkeysChangeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSubmitPubkeysChangeProposalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitPubkeysChangeProposalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitPubkeysChangeProposalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ticket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitPubkeysChangeProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitPubkeysChangeProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitPubkeysChangeProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVotePubkeysChangeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVotePubkeysChangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVotePubkeysChangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ticket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterKeyIndex", wireType)
			}
			m.VoterKeyIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoterKeyIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVotePubkeysChangeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVotePubkeysChangeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVotePubkeysChangeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
