// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sge/orderbook/participation.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OrderBookParticipation represents the participants of an order book.
type OrderBookParticipation struct {
	// index is the index of the participation in the participation queue.
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty" yaml:"index"`
	// order_book_uid is the unique identifier corresponding to the order book.
	OrderBookUID string `protobuf:"bytes,2,opt,name=order_book_uid,proto3" json:"order_book_uid"`
	// participant_address is the bech32-encoded address of the participant.
	ParticipantAddress string `protobuf:"bytes,3,opt,name=participant_address,json=participantAddress,proto3" json:"participant_address,omitempty" yaml:"participant_address"`
	// liquidity is the total initial liquidity provided.
	Liquidity cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=liquidity,proto3,customtype=cosmossdk.io/math.Int" json:"liquidity" yaml:"liquidity"`
	// fee is the amount of fee to be paid if participation happens.
	Fee cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=fee,proto3,customtype=cosmossdk.io/math.Int" json:"fee" yaml:"fee"`
	// current_round_liquidity is the liquidity provided for the current round.
	CurrentRoundLiquidity cosmossdk_io_math.Int `protobuf:"bytes,6,opt,name=current_round_liquidity,json=currentRoundLiquidity,proto3,customtype=cosmossdk.io/math.Int" json:"current_round_liquidity" yaml:"current_round_liquidity"`
	// exposures_not_filled represents if all of the exposures of the
	// participation are filled or not.
	ExposuresNotFilled uint64 `protobuf:"varint,7,opt,name=exposures_not_filled,json=exposuresNotFilled,proto3" json:"exposures_not_filled,omitempty" yaml:"exposures_not_filled"`
	// total_bet_amount is the total bet amount corresponding to all exposures.
	TotalBetAmount cosmossdk_io_math.Int `protobuf:"bytes,8,opt,name=total_bet_amount,json=totalBetAmount,proto3,customtype=cosmossdk.io/math.Int" json:"total_bet_amount" yaml:"total_bet_amount"`
	// current_round_total_bet_amount is the total bet amount corresponding to all
	// exposures in the current round.
	CurrentRoundTotalBetAmount cosmossdk_io_math.Int `protobuf:"bytes,9,opt,name=current_round_total_bet_amount,json=currentRoundTotalBetAmount,proto3,customtype=cosmossdk.io/math.Int" json:"current_round_total_bet_amount" yaml:"current_round_total_bet_amount"`
	// max_loss is the total bet amount corresponding to all exposure.
	MaxLoss cosmossdk_io_math.Int `protobuf:"bytes,10,opt,name=max_loss,json=maxLoss,proto3,customtype=cosmossdk.io/math.Int" json:"max_loss" yaml:"max_loss"`
	// current_round_max_loss is the current round max loss.
	CurrentRoundMaxLoss cosmossdk_io_math.Int `protobuf:"bytes,11,opt,name=current_round_max_loss,json=currentRoundMaxLoss,proto3,customtype=cosmossdk.io/math.Int" json:"current_round_max_loss" yaml:"current_round_max_loss"`
	// current_round_max_loss_odds_uid is the total max loss corresponding to
	// all exposures.
	CurrentRoundMaxLossOddsUID string `protobuf:"bytes,12,opt,name=current_round_max_loss_odds_uid,proto3" json:"current_round_max_loss_odds_uid" yaml:"current_round_max_loss_odds_uid"`
	// actual_profit is the actual profit of the participation fulfillment.
	ActualProfit cosmossdk_io_math.Int `protobuf:"bytes,13,opt,name=actual_profit,json=actualProfit,proto3,customtype=cosmossdk.io/math.Int" json:"actual_profit" yaml:"actual_profit"`
	// is_settled represents if the participation is settled or not.
	IsSettled bool `protobuf:"varint,14,opt,name=is_settled,json=isSettled,proto3" json:"is_settled,omitempty" yaml:"is_settled"`
	// returned_amount is the total returned amount to the user's account
	// including reimbursed fees.
	ReturnedAmount cosmossdk_io_math.Int `protobuf:"bytes,15,opt,name=returned_amount,json=returnedAmount,proto3,customtype=cosmossdk.io/math.Int" json:"returned_amount" yaml:"returned_amount"`
	// reimbursed_fee is the fee reimbursed because of reasons such as market
	// calcellation.
	ReimbursedFee cosmossdk_io_math.Int `protobuf:"bytes,16,opt,name=reimbursed_fee,json=reimbursedFee,proto3,customtype=cosmossdk.io/math.Int" json:"reimbursed_fee" yaml:"reimbursed_fee"`
}

func (m *OrderBookParticipation) Reset()      { *m = OrderBookParticipation{} }
func (*OrderBookParticipation) ProtoMessage() {}
func (*OrderBookParticipation) Descriptor() ([]byte, []int) {
	return fileDescriptor_2962bcb47b63c36a, []int{0}
}
func (m *OrderBookParticipation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderBookParticipation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderBookParticipation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderBookParticipation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderBookParticipation.Merge(m, src)
}
func (m *OrderBookParticipation) XXX_Size() int {
	return m.Size()
}
func (m *OrderBookParticipation) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderBookParticipation.DiscardUnknown(m)
}

var xxx_messageInfo_OrderBookParticipation proto.InternalMessageInfo

// ParticipationBetPair represents the book participation and bet bond.
type ParticipationBetPair struct {
	// order_book_uid is the unique identifier corresponding to the order book
	OrderBookUID string `protobuf:"bytes,1,opt,name=order_book_uid,proto3" json:"order_book_uid"`
	// participation_index is the index of participation corresponding to the bet
	// fulfillment.
	ParticipationIndex uint64 `protobuf:"varint,2,opt,name=participation_index,json=participationIndex,proto3" json:"participation_index,omitempty" yaml:"participation_index"`
	// bet_uid is the bet universal unique identifier of the bet that is
	// fulfilled.
	BetUID string `protobuf:"bytes,3,opt,name=bet_uid,proto3" json:"bet_uid"`
}

func (m *ParticipationBetPair) Reset()         { *m = ParticipationBetPair{} }
func (m *ParticipationBetPair) String() string { return proto.CompactTextString(m) }
func (*ParticipationBetPair) ProtoMessage()    {}
func (*ParticipationBetPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_2962bcb47b63c36a, []int{1}
}
func (m *ParticipationBetPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParticipationBetPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParticipationBetPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParticipationBetPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParticipationBetPair.Merge(m, src)
}
func (m *ParticipationBetPair) XXX_Size() int {
	return m.Size()
}
func (m *ParticipationBetPair) XXX_DiscardUnknown() {
	xxx_messageInfo_ParticipationBetPair.DiscardUnknown(m)
}

var xxx_messageInfo_ParticipationBetPair proto.InternalMessageInfo

func (m *ParticipationBetPair) GetOrderBookUID() string {
	if m != nil {
		return m.OrderBookUID
	}
	return ""
}

func (m *ParticipationBetPair) GetParticipationIndex() uint64 {
	if m != nil {
		return m.ParticipationIndex
	}
	return 0
}

func (m *ParticipationBetPair) GetBetUID() string {
	if m != nil {
		return m.BetUID
	}
	return ""
}

// SettledOrderbookParticipation is the type for a settled orderbook
// participation.
type SettledOrderbookParticipation struct {
	// index is the index of the participation in the participation queue.
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty" yaml:"index"`
	// order_book_uid is the unique identifier corresponding to the order book.
	OrderBookUID string `protobuf:"bytes,2,opt,name=order_book_uid,proto3" json:"order_book_uid"`
	// participant_address is the bech32-encoded address of the participant.
	ParticipantAddress string `protobuf:"bytes,3,opt,name=participant_address,json=participantAddress,proto3" json:"participant_address,omitempty" yaml:"participant_address"`
}

func (m *SettledOrderbookParticipation) Reset()         { *m = SettledOrderbookParticipation{} }
func (m *SettledOrderbookParticipation) String() string { return proto.CompactTextString(m) }
func (*SettledOrderbookParticipation) ProtoMessage()    {}
func (*SettledOrderbookParticipation) Descriptor() ([]byte, []int) {
	return fileDescriptor_2962bcb47b63c36a, []int{2}
}
func (m *SettledOrderbookParticipation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SettledOrderbookParticipation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SettledOrderbookParticipation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SettledOrderbookParticipation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettledOrderbookParticipation.Merge(m, src)
}
func (m *SettledOrderbookParticipation) XXX_Size() int {
	return m.Size()
}
func (m *SettledOrderbookParticipation) XXX_DiscardUnknown() {
	xxx_messageInfo_SettledOrderbookParticipation.DiscardUnknown(m)
}

var xxx_messageInfo_SettledOrderbookParticipation proto.InternalMessageInfo

func (m *SettledOrderbookParticipation) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *SettledOrderbookParticipation) GetOrderBookUID() string {
	if m != nil {
		return m.OrderBookUID
	}
	return ""
}

func (m *SettledOrderbookParticipation) GetParticipantAddress() string {
	if m != nil {
		return m.ParticipantAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*OrderBookParticipation)(nil), "sgenetwork.sge.orderbook.OrderBookParticipation")
	proto.RegisterType((*ParticipationBetPair)(nil), "sgenetwork.sge.orderbook.ParticipationBetPair")
	proto.RegisterType((*SettledOrderbookParticipation)(nil), "sgenetwork.sge.orderbook.SettledOrderbookParticipation")
}

func init() { proto.RegisterFile("sge/orderbook/participation.proto", fileDescriptor_2962bcb47b63c36a) }

var fileDescriptor_2962bcb47b63c36a = []byte{
	// 817 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x56, 0x4f, 0x6f, 0xfb, 0x34,
	0x18, 0x6e, 0x7e, 0xfb, 0x5b, 0xd3, 0x75, 0x25, 0x6b, 0xb7, 0xa8, 0x68, 0xf1, 0xb0, 0xc4, 0x34,
	0x09, 0x68, 0x41, 0xfc, 0xd5, 0x24, 0x40, 0x0b, 0xa8, 0xd2, 0x60, 0xd0, 0x61, 0xe0, 0x32, 0x09,
	0x85, 0xb4, 0x71, 0x3b, 0xab, 0x4d, 0x5c, 0x6c, 0x47, 0xeb, 0x3e, 0x00, 0x12, 0xe2, 0xc4, 0x91,
	0xe3, 0xbe, 0x04, 0xdf, 0x61, 0xc7, 0x1d, 0x11, 0x87, 0x08, 0x75, 0x1c, 0x10, 0xc7, 0x7e, 0x02,
	0x14, 0xbb, 0x4d, 0xff, 0xac, 0x90, 0x0b, 0xa7, 0xdf, 0xcd, 0x7e, 0xfc, 0xbe, 0xcf, 0xf3, 0xbc,
	0x4e, 0xfc, 0xda, 0xe0, 0x65, 0xd1, 0x25, 0x75, 0xc6, 0x7d, 0xc2, 0x5b, 0x8c, 0xf5, 0xea, 0x03,
	0x8f, 0x4b, 0xda, 0xa6, 0x03, 0x4f, 0x52, 0x16, 0xd6, 0x06, 0x9c, 0x49, 0x66, 0x5a, 0xa2, 0x4b,
	0x42, 0x22, 0x6f, 0x18, 0xef, 0xd5, 0x44, 0x97, 0xd4, 0xd2, 0xe8, 0x6a, 0xb9, 0xcb, 0xba, 0x4c,
	0x05, 0xd5, 0x93, 0x91, 0x8e, 0x47, 0x3f, 0x14, 0xc0, 0x7e, 0x33, 0x89, 0x71, 0x18, 0xeb, 0x5d,
	0xce, 0x13, 0x9a, 0xc7, 0x60, 0x83, 0x86, 0x3e, 0x19, 0x5a, 0xc6, 0x91, 0x71, 0xb2, 0xee, 0x94,
	0xc6, 0x31, 0x2c, 0xdc, 0x7a, 0x41, 0xff, 0x14, 0x29, 0x18, 0x61, 0xbd, 0x6c, 0x7e, 0x0a, 0x8a,
	0x4a, 0xc5, 0x4d, 0x64, 0xdc, 0x88, 0xfa, 0xd6, 0xb3, 0x23, 0xe3, 0x24, 0xef, 0xa0, 0x51, 0x0c,
	0x0b, 0x29, 0xf7, 0x37, 0xe7, 0x9f, 0xfc, 0x1d, 0xc3, 0xa5, 0x48, 0xbc, 0x34, 0x37, 0x9b, 0x60,
	0x2f, 0xad, 0x2a, 0x94, 0xae, 0xe7, 0xfb, 0x9c, 0x08, 0x61, 0xad, 0x29, 0x42, 0x7b, 0x1c, 0xc3,
	0xaa, 0x76, 0xb0, 0x22, 0x08, 0x61, 0x73, 0x0e, 0x3d, 0xd3, 0xa0, 0xd9, 0x04, 0xf9, 0x3e, 0xfd,
	0x3e, 0xa2, 0x3e, 0x95, 0xb7, 0xd6, 0xba, 0xa2, 0x79, 0xf3, 0x3e, 0x86, 0xb9, 0xdf, 0x63, 0x58,
	0x69, 0x33, 0x11, 0x30, 0x21, 0xfc, 0x5e, 0x8d, 0xb2, 0x7a, 0xe0, 0xc9, 0xeb, 0xda, 0x79, 0x28,
	0xc7, 0x31, 0x2c, 0x69, 0x8d, 0x34, 0x0f, 0xe1, 0x19, 0x87, 0xf9, 0x01, 0x58, 0xeb, 0x10, 0x62,
	0x6d, 0x28, 0xaa, 0x57, 0xb3, 0xa8, 0x80, 0xa6, 0xea, 0x10, 0x82, 0x70, 0x92, 0x67, 0xde, 0x80,
	0x83, 0x76, 0xc4, 0x39, 0x09, 0xa5, 0xcb, 0x59, 0x14, 0xfa, 0xee, 0xcc, 0xdd, 0xa6, 0xa2, 0xfc,
	0x28, 0x8b, 0xd2, 0xd6, 0x94, 0xff, 0xc2, 0x82, 0x70, 0x65, 0xb2, 0x82, 0x93, 0x85, 0x8b, 0xd4,
	0xf7, 0x97, 0xa0, 0x4c, 0x86, 0x03, 0x26, 0x22, 0x4e, 0x84, 0x1b, 0x32, 0xe9, 0x76, 0x68, 0xbf,
	0x4f, 0x7c, 0x6b, 0x4b, 0x7d, 0x5c, 0x38, 0x8e, 0xe1, 0x4b, 0x9a, 0x78, 0x55, 0x14, 0xc2, 0x66,
	0x0a, 0x7f, 0xc1, 0x64, 0x43, 0x81, 0x66, 0x0b, 0x94, 0x24, 0x93, 0x5e, 0xdf, 0x6d, 0x11, 0xe9,
	0x7a, 0x01, 0x8b, 0x42, 0x69, 0x6d, 0xab, 0x22, 0xde, 0xcf, 0x2a, 0xe2, 0x40, 0x6b, 0x2d, 0xa7,
	0x23, 0x5c, 0x54, 0x90, 0x43, 0xe4, 0x99, 0x02, 0xcc, 0x9f, 0x0c, 0x60, 0x2f, 0x96, 0xfa, 0x44,
	0x32, 0xaf, 0x24, 0x1b, 0x59, 0x92, 0xaf, 0xac, 0xda, 0xb7, 0xa7, 0x06, 0xaa, 0xf3, 0xdb, 0xf7,
	0xf5, 0xa2, 0x99, 0xcf, 0xc0, 0x76, 0xe0, 0x0d, 0xdd, 0x3e, 0x13, 0xc2, 0x02, 0x4a, 0xf5, 0x8d,
	0x2c, 0xd5, 0x5d, 0xad, 0x3a, 0x4d, 0x43, 0x78, 0x2b, 0xf0, 0x86, 0x17, 0x4c, 0x08, 0x53, 0x80,
	0xfd, 0x45, 0x2f, 0x29, 0xf5, 0x0b, 0x8a, 0xfa, 0xc3, 0x2c, 0xea, 0xc3, 0x55, 0x05, 0xcd, 0x84,
	0xf6, 0xe6, 0x0b, 0xf9, 0x7c, 0x22, 0xfa, 0xab, 0x01, 0xe0, 0xea, 0x04, 0x97, 0xf9, 0xbe, 0x50,
	0xa7, 0xb7, 0xa0, 0xe4, 0x7b, 0xa3, 0x18, 0x56, 0x3f, 0x7e, 0x4a, 0xd1, 0xf4, 0x7d, 0xa1, 0xcf,
	0x72, 0x16, 0xd1, 0x38, 0x86, 0xc7, 0xff, 0x65, 0x31, 0x0d, 0x44, 0x38, 0x8b, 0xca, 0xbc, 0x02,
	0x3b, 0x5e, 0x5b, 0x46, 0x5e, 0xdf, 0x1d, 0x70, 0xd6, 0xa1, 0xd2, 0xda, 0x51, 0x26, 0xdf, 0xc9,
	0xda, 0xa3, 0xb2, 0x36, 0xb0, 0x90, 0x8b, 0x70, 0x41, 0xcf, 0x2f, 0xd5, 0xd4, 0x7c, 0x1b, 0x00,
	0x2a, 0x5c, 0x41, 0xa4, 0x4c, 0xce, 0x43, 0xf1, 0xc8, 0x38, 0xd9, 0x76, 0x2a, 0xe3, 0x18, 0xbe,
	0x38, 0x69, 0x76, 0xe9, 0x1a, 0xc2, 0x79, 0x2a, 0xbe, 0xd2, 0x63, 0xf3, 0x3b, 0xb0, 0xcb, 0x89,
	0x8c, 0x78, 0x48, 0xfc, 0xe9, 0x8f, 0xb8, 0xab, 0x3c, 0xbd, 0x97, 0xe5, 0x69, 0x5f, 0xf3, 0x2e,
	0x65, 0x23, 0x5c, 0x9c, 0x22, 0x93, 0xbf, 0xed, 0x5b, 0x50, 0xe4, 0x84, 0x06, 0xad, 0x88, 0x0b,
	0xe2, 0xbb, 0x49, 0xd3, 0x29, 0x29, 0x81, 0x77, 0xb3, 0x04, 0x2a, 0x53, 0x81, 0xf9, 0x64, 0x84,
	0x77, 0x66, 0x40, 0x83, 0x90, 0xd3, 0xc2, 0x8f, 0x77, 0x30, 0xf7, 0xcb, 0x1d, 0xcc, 0xfd, 0x75,
	0x07, 0x73, 0xe8, 0x4f, 0x03, 0x94, 0x17, 0xda, 0xbf, 0x43, 0xe4, 0xa5, 0x47, 0xf9, 0x8a, 0xee,
	0x6e, 0xfc, 0x2f, 0xdd, 0x3d, 0xd1, 0x70, 0xf5, 0xfd, 0xf2, 0x4c, 0xb5, 0xa0, 0x55, 0xdd, 0x7d,
	0x16, 0x34, 0xdf, 0xdd, 0x13, 0xf4, 0x5c, 0x5d, 0x3d, 0x75, 0xb0, 0x95, 0x9c, 0xdd, 0xc4, 0x95,
	0xbe, 0x22, 0x2a, 0xa3, 0x18, 0x6e, 0x3a, 0x44, 0x6a, 0x3f, 0xd3, 0x45, 0x3c, 0x1d, 0x24, 0x65,
	0x1e, 0x4e, 0xbe, 0x60, 0x73, 0x7a, 0x33, 0x3e, 0x7f, 0xb7, 0x9e, 0xd3, 0xb8, 0x1f, 0xd9, 0xc6,
	0xc3, 0xc8, 0x36, 0xfe, 0x18, 0xd9, 0xc6, 0xcf, 0x8f, 0x76, 0xee, 0xe1, 0xd1, 0xce, 0xfd, 0xf6,
	0x68, 0xe7, 0xae, 0x5e, 0xeb, 0x52, 0x79, 0x1d, 0xb5, 0x6a, 0x6d, 0x16, 0xd4, 0x45, 0x97, 0xbc,
	0x3e, 0x79, 0x2b, 0x24, 0xe3, 0xfa, 0x70, 0xee, 0x6d, 0x21, 0x6f, 0x07, 0x44, 0xb4, 0x36, 0xd5,
	0x23, 0xe1, 0xad, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x1d, 0x34, 0x98, 0x79, 0x08, 0x00,
	0x00,
}

func (m *OrderBookParticipation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderBookParticipation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderBookParticipation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ReimbursedFee.Size()
		i -= size
		if _, err := m.ReimbursedFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParticipation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size := m.ReturnedAmount.Size()
		i -= size
		if _, err := m.ReturnedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParticipation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	if m.IsSettled {
		i--
		if m.IsSettled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	{
		size := m.ActualProfit.Size()
		i -= size
		if _, err := m.ActualProfit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParticipation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if len(m.CurrentRoundMaxLossOddsUID) > 0 {
		i -= len(m.CurrentRoundMaxLossOddsUID)
		copy(dAtA[i:], m.CurrentRoundMaxLossOddsUID)
		i = encodeVarintParticipation(dAtA, i, uint64(len(m.CurrentRoundMaxLossOddsUID)))
		i--
		dAtA[i] = 0x62
	}
	{
		size := m.CurrentRoundMaxLoss.Size()
		i -= size
		if _, err := m.CurrentRoundMaxLoss.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParticipation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.MaxLoss.Size()
		i -= size
		if _, err := m.MaxLoss.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParticipation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.CurrentRoundTotalBetAmount.Size()
		i -= size
		if _, err := m.CurrentRoundTotalBetAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParticipation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.TotalBetAmount.Size()
		i -= size
		if _, err := m.TotalBetAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParticipation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.ExposuresNotFilled != 0 {
		i = encodeVarintParticipation(dAtA, i, uint64(m.ExposuresNotFilled))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.CurrentRoundLiquidity.Size()
		i -= size
		if _, err := m.CurrentRoundLiquidity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParticipation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.Fee.Size()
		i -= size
		if _, err := m.Fee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParticipation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Liquidity.Size()
		i -= size
		if _, err := m.Liquidity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParticipation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ParticipantAddress) > 0 {
		i -= len(m.ParticipantAddress)
		copy(dAtA[i:], m.ParticipantAddress)
		i = encodeVarintParticipation(dAtA, i, uint64(len(m.ParticipantAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrderBookUID) > 0 {
		i -= len(m.OrderBookUID)
		copy(dAtA[i:], m.OrderBookUID)
		i = encodeVarintParticipation(dAtA, i, uint64(len(m.OrderBookUID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintParticipation(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ParticipationBetPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParticipationBetPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParticipationBetPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BetUID) > 0 {
		i -= len(m.BetUID)
		copy(dAtA[i:], m.BetUID)
		i = encodeVarintParticipation(dAtA, i, uint64(len(m.BetUID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ParticipationIndex != 0 {
		i = encodeVarintParticipation(dAtA, i, uint64(m.ParticipationIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OrderBookUID) > 0 {
		i -= len(m.OrderBookUID)
		copy(dAtA[i:], m.OrderBookUID)
		i = encodeVarintParticipation(dAtA, i, uint64(len(m.OrderBookUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SettledOrderbookParticipation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SettledOrderbookParticipation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SettledOrderbookParticipation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ParticipantAddress) > 0 {
		i -= len(m.ParticipantAddress)
		copy(dAtA[i:], m.ParticipantAddress)
		i = encodeVarintParticipation(dAtA, i, uint64(len(m.ParticipantAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrderBookUID) > 0 {
		i -= len(m.OrderBookUID)
		copy(dAtA[i:], m.OrderBookUID)
		i = encodeVarintParticipation(dAtA, i, uint64(len(m.OrderBookUID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintParticipation(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParticipation(dAtA []byte, offset int, v uint64) int {
	offset -= sovParticipation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OrderBookParticipation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovParticipation(uint64(m.Index))
	}
	l = len(m.OrderBookUID)
	if l > 0 {
		n += 1 + l + sovParticipation(uint64(l))
	}
	l = len(m.ParticipantAddress)
	if l > 0 {
		n += 1 + l + sovParticipation(uint64(l))
	}
	l = m.Liquidity.Size()
	n += 1 + l + sovParticipation(uint64(l))
	l = m.Fee.Size()
	n += 1 + l + sovParticipation(uint64(l))
	l = m.CurrentRoundLiquidity.Size()
	n += 1 + l + sovParticipation(uint64(l))
	if m.ExposuresNotFilled != 0 {
		n += 1 + sovParticipation(uint64(m.ExposuresNotFilled))
	}
	l = m.TotalBetAmount.Size()
	n += 1 + l + sovParticipation(uint64(l))
	l = m.CurrentRoundTotalBetAmount.Size()
	n += 1 + l + sovParticipation(uint64(l))
	l = m.MaxLoss.Size()
	n += 1 + l + sovParticipation(uint64(l))
	l = m.CurrentRoundMaxLoss.Size()
	n += 1 + l + sovParticipation(uint64(l))
	l = len(m.CurrentRoundMaxLossOddsUID)
	if l > 0 {
		n += 1 + l + sovParticipation(uint64(l))
	}
	l = m.ActualProfit.Size()
	n += 1 + l + sovParticipation(uint64(l))
	if m.IsSettled {
		n += 2
	}
	l = m.ReturnedAmount.Size()
	n += 1 + l + sovParticipation(uint64(l))
	l = m.ReimbursedFee.Size()
	n += 2 + l + sovParticipation(uint64(l))
	return n
}

func (m *ParticipationBetPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderBookUID)
	if l > 0 {
		n += 1 + l + sovParticipation(uint64(l))
	}
	if m.ParticipationIndex != 0 {
		n += 1 + sovParticipation(uint64(m.ParticipationIndex))
	}
	l = len(m.BetUID)
	if l > 0 {
		n += 1 + l + sovParticipation(uint64(l))
	}
	return n
}

func (m *SettledOrderbookParticipation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovParticipation(uint64(m.Index))
	}
	l = len(m.OrderBookUID)
	if l > 0 {
		n += 1 + l + sovParticipation(uint64(l))
	}
	l = len(m.ParticipantAddress)
	if l > 0 {
		n += 1 + l + sovParticipation(uint64(l))
	}
	return n
}

func sovParticipation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParticipation(x uint64) (n int) {
	return sovParticipation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OrderBookParticipation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParticipation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderBookParticipation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderBookParticipation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBookUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBookUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipantAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Liquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRoundLiquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentRoundLiquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExposuresNotFilled", wireType)
			}
			m.ExposuresNotFilled = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExposuresNotFilled |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBetAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalBetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRoundTotalBetAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentRoundTotalBetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLoss", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxLoss.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRoundMaxLoss", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentRoundMaxLoss.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRoundMaxLossOddsUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentRoundMaxLossOddsUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualProfit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActualProfit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSettled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSettled = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReturnedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReimbursedFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReimbursedFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParticipation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParticipation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParticipationBetPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParticipation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParticipationBetPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParticipationBetPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBookUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBookUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipationIndex", wireType)
			}
			m.ParticipationIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipationIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BetUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParticipation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParticipation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SettledOrderbookParticipation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParticipation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SettledOrderbookParticipation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SettledOrderbookParticipation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBookUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBookUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParticipation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParticipation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipantAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParticipation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParticipation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParticipation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParticipation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParticipation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParticipation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParticipation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParticipation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParticipation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParticipation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParticipation = fmt.Errorf("proto: unexpected end of group")
)
