// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sgenetwork/sge/reward/promoter.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Promoter is type for defining the reward promoter properties and
// configuration.
type Promoter struct {
	// creator is the address of promoter.
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// uid is the unique identifier of a promoter.
	UID string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid"`
	// addresses is the list of account addresses of promoter.
	Addresses []string `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// conf is the configurations of the current promoter for the reward grant.
	Conf PromoterConf `protobuf:"bytes,4,opt,name=conf,proto3" json:"conf"`
}

func (m *Promoter) Reset()         { *m = Promoter{} }
func (m *Promoter) String() string { return proto.CompactTextString(m) }
func (*Promoter) ProtoMessage()    {}
func (*Promoter) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdd141f5acd4b4a9, []int{0}
}
func (m *Promoter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Promoter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Promoter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Promoter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Promoter.Merge(m, src)
}
func (m *Promoter) XXX_Size() int {
	return m.Size()
}
func (m *Promoter) XXX_DiscardUnknown() {
	xxx_messageInfo_Promoter.DiscardUnknown(m)
}

var xxx_messageInfo_Promoter proto.InternalMessageInfo

func (m *Promoter) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Promoter) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *Promoter) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *Promoter) GetConf() PromoterConf {
	if m != nil {
		return m.Conf
	}
	return PromoterConf{}
}

// PromoterConf is type for defining the promoter specific configurations.
type PromoterConf struct {
	// category_cap is the maximium allowed cap for each category.
	CategoryCap []CategoryCap `protobuf:"bytes,1,rep,name=category_cap,json=categoryCap,proto3" json:"category_cap"`
}

func (m *PromoterConf) Reset()         { *m = PromoterConf{} }
func (m *PromoterConf) String() string { return proto.CompactTextString(m) }
func (*PromoterConf) ProtoMessage()    {}
func (*PromoterConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdd141f5acd4b4a9, []int{1}
}
func (m *PromoterConf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromoterConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PromoterConf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PromoterConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromoterConf.Merge(m, src)
}
func (m *PromoterConf) XXX_Size() int {
	return m.Size()
}
func (m *PromoterConf) XXX_DiscardUnknown() {
	xxx_messageInfo_PromoterConf.DiscardUnknown(m)
}

var xxx_messageInfo_PromoterConf proto.InternalMessageInfo

func (m *PromoterConf) GetCategoryCap() []CategoryCap {
	if m != nil {
		return m.CategoryCap
	}
	return nil
}

// CategoryCap is type to define category and its maximum cap.
type CategoryCap struct {
	Category  RewardCategory `protobuf:"varint,1,opt,name=category,proto3,enum=sgenetwork.sge.reward.RewardCategory" json:"category,omitempty"`
	CapPerAcc int32          `protobuf:"varint,2,opt,name=cap_per_acc,json=capPerAcc,proto3" json:"cap_per_acc,omitempty"`
}

func (m *CategoryCap) Reset()         { *m = CategoryCap{} }
func (m *CategoryCap) String() string { return proto.CompactTextString(m) }
func (*CategoryCap) ProtoMessage()    {}
func (*CategoryCap) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdd141f5acd4b4a9, []int{2}
}
func (m *CategoryCap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CategoryCap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CategoryCap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CategoryCap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CategoryCap.Merge(m, src)
}
func (m *CategoryCap) XXX_Size() int {
	return m.Size()
}
func (m *CategoryCap) XXX_DiscardUnknown() {
	xxx_messageInfo_CategoryCap.DiscardUnknown(m)
}

var xxx_messageInfo_CategoryCap proto.InternalMessageInfo

func (m *CategoryCap) GetCategory() RewardCategory {
	if m != nil {
		return m.Category
	}
	return RewardCategory_REWARD_CATEGORY_UNSPECIFIED
}

func (m *CategoryCap) GetCapPerAcc() int32 {
	if m != nil {
		return m.CapPerAcc
	}
	return 0
}

// PromoterByAddress is type for defining the promoter by address.
type PromoterByAddress struct {
	// promoter_uid is the unique identifier of a certain promoter.
	PromoterUID string `protobuf:"bytes,1,opt,name=promoter_uid,proto3" json:"promoter_uid"`
	// address is the address of the promoter account.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *PromoterByAddress) Reset()         { *m = PromoterByAddress{} }
func (m *PromoterByAddress) String() string { return proto.CompactTextString(m) }
func (*PromoterByAddress) ProtoMessage()    {}
func (*PromoterByAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdd141f5acd4b4a9, []int{3}
}
func (m *PromoterByAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromoterByAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PromoterByAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PromoterByAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromoterByAddress.Merge(m, src)
}
func (m *PromoterByAddress) XXX_Size() int {
	return m.Size()
}
func (m *PromoterByAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_PromoterByAddress.DiscardUnknown(m)
}

var xxx_messageInfo_PromoterByAddress proto.InternalMessageInfo

func (m *PromoterByAddress) GetPromoterUID() string {
	if m != nil {
		return m.PromoterUID
	}
	return ""
}

func (m *PromoterByAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*Promoter)(nil), "sgenetwork.sge.reward.Promoter")
	proto.RegisterType((*PromoterConf)(nil), "sgenetwork.sge.reward.PromoterConf")
	proto.RegisterType((*CategoryCap)(nil), "sgenetwork.sge.reward.CategoryCap")
	proto.RegisterType((*PromoterByAddress)(nil), "sgenetwork.sge.reward.PromoterByAddress")
}

func init() {
	proto.RegisterFile("sgenetwork/sge/reward/promoter.proto", fileDescriptor_fdd141f5acd4b4a9)
}

var fileDescriptor_fdd141f5acd4b4a9 = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x31, 0x8f, 0xd3, 0x30,
	0x14, 0xc7, 0x6b, 0x52, 0xe0, 0xea, 0x54, 0x27, 0x61, 0x1d, 0x52, 0x38, 0xa1, 0x24, 0x0a, 0x20,
	0x95, 0xe1, 0x52, 0xa9, 0xcc, 0x0c, 0x6d, 0x58, 0x10, 0xcb, 0xc9, 0x88, 0x05, 0x86, 0xc8, 0xe7,
	0xf8, 0x4c, 0x85, 0x1a, 0x5b, 0xb6, 0x4f, 0x47, 0xbf, 0x03, 0x03, 0x1f, 0x86, 0x95, 0xfd, 0xc6,
	0x13, 0x13, 0x53, 0x84, 0xd2, 0x8d, 0x4f, 0x81, 0x12, 0xdb, 0xb4, 0x27, 0x5d, 0x6f, 0x89, 0xe3,
	0xf7, 0x7e, 0xef, 0xd9, 0xfe, 0xbf, 0x3f, 0x7c, 0xae, 0x39, 0xab, 0x99, 0xb9, 0x14, 0xea, 0xcb,
	0x54, 0x73, 0x36, 0x55, 0xec, 0x92, 0xa8, 0x6a, 0x2a, 0x95, 0x58, 0x09, 0xc3, 0x54, 0x2e, 0x95,
	0x30, 0x02, 0x3d, 0xde, 0x52, 0xb9, 0xe6, 0x2c, 0xb7, 0xd4, 0xf1, 0x11, 0x17, 0x5c, 0xf4, 0xc4,
	0xb4, 0xfb, 0xb3, 0xf0, 0xf1, 0x13, 0x2a, 0xf4, 0x4a, 0xe8, 0xd2, 0x26, 0xec, 0xc6, 0xa5, 0xb2,
	0xdb, 0x4f, 0xb3, 0x8b, 0x65, 0xb2, 0x9f, 0x00, 0x1e, 0x9c, 0xba, 0xe3, 0xd1, 0x0c, 0x3e, 0xa4,
	0x8a, 0x11, 0x23, 0x54, 0x04, 0x52, 0x30, 0x19, 0x2d, 0xa2, 0x5f, 0x3f, 0x4e, 0x8e, 0x5c, 0xcf,
	0x79, 0x55, 0x29, 0xa6, 0xf5, 0x7b, 0xa3, 0x96, 0x35, 0xc7, 0x1e, 0x44, 0x29, 0x0c, 0x2e, 0x96,
	0x55, 0x74, 0xaf, 0xe7, 0x0f, 0xdb, 0x26, 0x09, 0x3e, 0xbc, 0x7d, 0xf3, 0xb7, 0x49, 0xba, 0x28,
	0xee, 0x3e, 0xe8, 0x29, 0x1c, 0x11, 0x5b, 0xcb, 0x74, 0x14, 0xa4, 0xc1, 0x64, 0x84, 0xb7, 0x01,
	0xf4, 0x1a, 0x0e, 0xa9, 0xa8, 0xcf, 0xa3, 0x61, 0x0a, 0x26, 0xe1, 0xec, 0x59, 0x7e, 0xeb, 0xdb,
	0x73, 0x7f, 0xc5, 0x42, 0xd4, 0xe7, 0x8b, 0xe1, 0x55, 0x93, 0x0c, 0x70, 0x5f, 0x96, 0x7d, 0x82,
	0xe3, 0xdd, 0x1c, 0x7a, 0x07, 0xc7, 0x94, 0x18, 0xc6, 0x85, 0x5a, 0x97, 0x94, 0xc8, 0x08, 0xa4,
	0xc1, 0x24, 0x9c, 0x65, 0x7b, 0xda, 0x16, 0x0e, 0x2d, 0x88, 0x74, 0x5d, 0x43, 0xba, 0x0d, 0x65,
	0x12, 0x86, 0x3b, 0x04, 0x9a, 0xc3, 0x03, 0x9f, 0xed, 0xf5, 0x39, 0x9c, 0xbd, 0xd8, 0xd3, 0x17,
	0xf7, 0x8b, 0xaf, 0xc5, 0xff, 0xcb, 0x50, 0x0c, 0x43, 0x4a, 0x64, 0x29, 0x99, 0x2a, 0x09, 0xa5,
	0xbd, 0x6a, 0xf7, 0xf1, 0x88, 0x12, 0x79, 0xca, 0xd4, 0x9c, 0xd2, 0xec, 0x1b, 0x80, 0x8f, 0xfc,
	0x7b, 0x16, 0x6b, 0x27, 0x39, 0x2a, 0xe0, 0xd8, 0x5b, 0xa4, 0xec, 0xc4, 0xb6, 0xc3, 0x49, 0xda,
	0x26, 0x09, 0x3d, 0x6c, 0x45, 0xbf, 0x81, 0xe1, 0x1b, 0xbb, 0x6e, 0xb8, 0x4e, 0x75, 0x37, 0xac,
	0x3b, 0x86, 0xeb, 0xc0, 0x45, 0x71, 0xd5, 0xc6, 0xe0, 0xba, 0x8d, 0xc1, 0x9f, 0x36, 0x06, 0xdf,
	0x37, 0xf1, 0xe0, 0x7a, 0x13, 0x0f, 0x7e, 0x6f, 0xe2, 0xc1, 0xc7, 0x97, 0x7c, 0x69, 0x3e, 0x5f,
	0x9c, 0xe5, 0x54, 0xac, 0x3a, 0x6f, 0x9d, 0xec, 0xfa, 0xec, 0xab, 0x77, 0x9a, 0x59, 0x4b, 0xa6,
	0xcf, 0x1e, 0xf4, 0x4e, 0x7b, 0xf5, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xe0, 0xd7, 0x89, 0x57, 0xfd,
	0x02, 0x00, 0x00,
}

func (m *Promoter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Promoter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Promoter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Conf.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPromoter(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintPromoter(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.UID) > 0 {
		i -= len(m.UID)
		copy(dAtA[i:], m.UID)
		i = encodeVarintPromoter(dAtA, i, uint64(len(m.UID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintPromoter(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PromoterConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromoterConf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PromoterConf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CategoryCap) > 0 {
		for iNdEx := len(m.CategoryCap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CategoryCap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPromoter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CategoryCap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CategoryCap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CategoryCap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CapPerAcc != 0 {
		i = encodeVarintPromoter(dAtA, i, uint64(m.CapPerAcc))
		i--
		dAtA[i] = 0x10
	}
	if m.Category != 0 {
		i = encodeVarintPromoter(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PromoterByAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromoterByAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PromoterByAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPromoter(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PromoterUID) > 0 {
		i -= len(m.PromoterUID)
		copy(dAtA[i:], m.PromoterUID)
		i = encodeVarintPromoter(dAtA, i, uint64(len(m.PromoterUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPromoter(dAtA []byte, offset int, v uint64) int {
	offset -= sovPromoter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Promoter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovPromoter(uint64(l))
	}
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovPromoter(uint64(l))
	}
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovPromoter(uint64(l))
		}
	}
	l = m.Conf.Size()
	n += 1 + l + sovPromoter(uint64(l))
	return n
}

func (m *PromoterConf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CategoryCap) > 0 {
		for _, e := range m.CategoryCap {
			l = e.Size()
			n += 1 + l + sovPromoter(uint64(l))
		}
	}
	return n
}

func (m *CategoryCap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Category != 0 {
		n += 1 + sovPromoter(uint64(m.Category))
	}
	if m.CapPerAcc != 0 {
		n += 1 + sovPromoter(uint64(m.CapPerAcc))
	}
	return n
}

func (m *PromoterByAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PromoterUID)
	if l > 0 {
		n += 1 + l + sovPromoter(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPromoter(uint64(l))
	}
	return n
}

func sovPromoter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPromoter(x uint64) (n int) {
	return sovPromoter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Promoter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromoter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Promoter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Promoter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPromoter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPromoter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPromoter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPromoter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPromoter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPromoter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPromoter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPromoter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Conf.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPromoter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPromoter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromoterConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromoter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromoterConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromoterConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryCap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPromoter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPromoter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CategoryCap = append(m.CategoryCap, CategoryCap{})
			if err := m.CategoryCap[len(m.CategoryCap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPromoter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPromoter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CategoryCap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromoter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CategoryCap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CategoryCap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= RewardCategory(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CapPerAcc", wireType)
			}
			m.CapPerAcc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CapPerAcc |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPromoter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPromoter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromoterByAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromoter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromoterByAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromoterByAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromoterUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPromoter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPromoter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PromoterUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPromoter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPromoter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPromoter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPromoter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPromoter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPromoter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPromoter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPromoter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPromoter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPromoter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPromoter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPromoter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPromoter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPromoter = fmt.Errorf("proto: unexpected end of group")
)
