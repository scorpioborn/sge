// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sgenetwork/sge/reward/reward.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RewardType defines supported types of rewards in reward module.
type RewardCategory int32

const (
	// the invalid or unknown
	RewardCategory_REWARD_CATEGORY_UNSPECIFIED RewardCategory = 0
	// signup reward
	RewardCategory_REWARD_CATEGORY_SIGNUP RewardCategory = 1
	// referral reward
	RewardCategory_REWARD_CATEGORY_REFERRAL RewardCategory = 2
	// affiliate reward
	RewardCategory_REWARD_CATEGORY_AFFILIATE RewardCategory = 3
	// bet refunds
	RewardCategory_REWARD_CATEGORY_BET_REFUND RewardCategory = 4
	// milestone reward
	RewardCategory_REWARD_CATEGORY_MILESTONE RewardCategory = 5
	// bet discounts
	RewardCategory_REWARD_CATEGORY_BET_DISCOUNT RewardCategory = 6
	// other rewards
	RewardCategory_REWARD_CATEGORY_OTHER RewardCategory = 7
)

var RewardCategory_name = map[int32]string{
	0: "REWARD_CATEGORY_UNSPECIFIED",
	1: "REWARD_CATEGORY_SIGNUP",
	2: "REWARD_CATEGORY_REFERRAL",
	3: "REWARD_CATEGORY_AFFILIATE",
	4: "REWARD_CATEGORY_BET_REFUND",
	5: "REWARD_CATEGORY_MILESTONE",
	6: "REWARD_CATEGORY_BET_DISCOUNT",
	7: "REWARD_CATEGORY_OTHER",
}

var RewardCategory_value = map[string]int32{
	"REWARD_CATEGORY_UNSPECIFIED":  0,
	"REWARD_CATEGORY_SIGNUP":       1,
	"REWARD_CATEGORY_REFERRAL":     2,
	"REWARD_CATEGORY_AFFILIATE":    3,
	"REWARD_CATEGORY_BET_REFUND":   4,
	"REWARD_CATEGORY_MILESTONE":    5,
	"REWARD_CATEGORY_BET_DISCOUNT": 6,
	"REWARD_CATEGORY_OTHER":        7,
}

func (x RewardCategory) String() string {
	return proto.EnumName(RewardCategory_name, int32(x))
}

func (RewardCategory) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_31e6858ad0a3d6b8, []int{0}
}

// RewardType defines supported types of rewards of reward module.
type RewardType int32

const (
	// the invalid or unknown
	RewardType_REWARD_TYPE_UNSPECIFIED RewardType = 0
	// signup reward
	RewardType_REWARD_TYPE_SIGNUP RewardType = 1
	// referral signup reward
	RewardType_REWARD_TYPE_REFERRAL_SIGNUP RewardType = 2
	// affiliate signup reward
	RewardType_REWARD_TYPE_AFFILIATE_SIGNUP RewardType = 3
	// referral reward
	RewardType_REWARD_TYPE_REFERRAL RewardType = 4
	// affiliate reward
	RewardType_REWARD_TYPE_AFFILIATE RewardType = 5
	// bet refunds
	RewardType_REWARD_TYPE_BET_REFUND RewardType = 6
	// milestone reward
	RewardType_REWARD_TYPE_MILESTONE RewardType = 7
	// bet discounts
	RewardType_REWARD_TYPE_BET_DISCOUNT RewardType = 8
	// other rewards
	RewardType_REWARD_TYPE_OTHER RewardType = 9
)

var RewardType_name = map[int32]string{
	0: "REWARD_TYPE_UNSPECIFIED",
	1: "REWARD_TYPE_SIGNUP",
	2: "REWARD_TYPE_REFERRAL_SIGNUP",
	3: "REWARD_TYPE_AFFILIATE_SIGNUP",
	4: "REWARD_TYPE_REFERRAL",
	5: "REWARD_TYPE_AFFILIATE",
	6: "REWARD_TYPE_BET_REFUND",
	7: "REWARD_TYPE_MILESTONE",
	8: "REWARD_TYPE_BET_DISCOUNT",
	9: "REWARD_TYPE_OTHER",
}

var RewardType_value = map[string]int32{
	"REWARD_TYPE_UNSPECIFIED":      0,
	"REWARD_TYPE_SIGNUP":           1,
	"REWARD_TYPE_REFERRAL_SIGNUP":  2,
	"REWARD_TYPE_AFFILIATE_SIGNUP": 3,
	"REWARD_TYPE_REFERRAL":         4,
	"REWARD_TYPE_AFFILIATE":        5,
	"REWARD_TYPE_BET_REFUND":       6,
	"REWARD_TYPE_MILESTONE":        7,
	"REWARD_TYPE_BET_DISCOUNT":     8,
	"REWARD_TYPE_OTHER":            9,
}

func (x RewardType) String() string {
	return proto.EnumName(RewardType_name, int32(x))
}

func (RewardType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_31e6858ad0a3d6b8, []int{1}
}

// RewardType defines supported types of rewards of reward module.
type RewardAmountType int32

const (
	// the invalid or unknown
	RewardAmountType_REWARD_AMOUNT_TYPE_UNSPECIFIED RewardAmountType = 0
	// Fixed amount
	RewardAmountType_REWARD_AMOUNT_TYPE_FIXED RewardAmountType = 1
	// Business logic defined amount
	RewardAmountType_REWARD_AMOUNT_TYPE_LOGIC RewardAmountType = 2
	// Percentage of bet amount
	RewardAmountType_REWARD_AMOUNT_TYPE_PERCENTAGE RewardAmountType = 3
)

var RewardAmountType_name = map[int32]string{
	0: "REWARD_AMOUNT_TYPE_UNSPECIFIED",
	1: "REWARD_AMOUNT_TYPE_FIXED",
	2: "REWARD_AMOUNT_TYPE_LOGIC",
	3: "REWARD_AMOUNT_TYPE_PERCENTAGE",
}

var RewardAmountType_value = map[string]int32{
	"REWARD_AMOUNT_TYPE_UNSPECIFIED": 0,
	"REWARD_AMOUNT_TYPE_FIXED":       1,
	"REWARD_AMOUNT_TYPE_LOGIC":       2,
	"REWARD_AMOUNT_TYPE_PERCENTAGE":  3,
}

func (x RewardAmountType) String() string {
	return proto.EnumName(RewardAmountType_name, int32(x))
}

func (RewardAmountType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_31e6858ad0a3d6b8, []int{2}
}

// Reward is the type for transaction made to reward a user
// based on users eligibility.
type Reward struct {
	// uid is the unique identifier for a reward.
	UID string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid"`
	// creator is the address of the account that invokes the reward transaction.
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	// receiver is the address of the account that receives the reward.
	Receiver string `protobuf:"bytes,3,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// campaign_uid is the unique identifier of the campaign.
	CampaignUID string `protobuf:"bytes,4,opt,name=campaign_uid,proto3" json:"campaign_uid"`
	// reward_amount is the amount of the reward.
	RewardAmount *RewardAmount `protobuf:"bytes,7,opt,name=reward_amount,proto3" json:"reward_amount"`
	// source_uid is the address of the source.
	// It is used to identify the source of the reward.
	// For example, the source uid of a referral signup
	// reward is the address of the referer.
	SourceUID string `protobuf:"bytes,8,opt,name=source_uid,proto3" json:"source_uid"`
	// meta is the metadata of the campaign.
	// It is a stringified base64 encoded json.
	Meta string `protobuf:"bytes,12,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (m *Reward) Reset()         { *m = Reward{} }
func (m *Reward) String() string { return proto.CompactTextString(m) }
func (*Reward) ProtoMessage()    {}
func (*Reward) Descriptor() ([]byte, []int) {
	return fileDescriptor_31e6858ad0a3d6b8, []int{0}
}
func (m *Reward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reward.Merge(m, src)
}
func (m *Reward) XXX_Size() int {
	return m.Size()
}
func (m *Reward) XXX_DiscardUnknown() {
	xxx_messageInfo_Reward.DiscardUnknown(m)
}

var xxx_messageInfo_Reward proto.InternalMessageInfo

func (m *Reward) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *Reward) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Reward) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *Reward) GetCampaignUID() string {
	if m != nil {
		return m.CampaignUID
	}
	return ""
}

func (m *Reward) GetRewardAmount() *RewardAmount {
	if m != nil {
		return m.RewardAmount
	}
	return nil
}

func (m *Reward) GetSourceUID() string {
	if m != nil {
		return m.SourceUID
	}
	return ""
}

func (m *Reward) GetMeta() string {
	if m != nil {
		return m.Meta
	}
	return ""
}

// RewardAmount
type RewardAmount struct {
	// main_account_amount transferred to main account address
	MainAccountAmount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=main_account_amount,json=mainAccountAmount,proto3,customtype=cosmossdk.io/math.Int" json:"main_account_amount" yaml:"main_account_amount"`
	// subaccount_amount transferred to subaccount address
	SubaccountAmount cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=subaccount_amount,json=subaccountAmount,proto3,customtype=cosmossdk.io/math.Int" json:"subaccount_amount" yaml:"subaccount_amount"`
	// unlock_period is the period after which the reward is unlocked.
	UnlockPeriod uint64 `protobuf:"varint,3,opt,name=unlock_period,proto3" json:"unlock_period"`
	// main_account_percentage transferred to main account address
	MainAccountPercentage github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=main_account_percentage,json=mainAccountPercentage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"main_account_percentage" yaml:"main_account_percentage"`
	// subaccount_percentage amount transferred to subaccount address
	SubaccountPercentage github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=subaccount_percentage,json=subaccountPercentage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"subaccount_percentage" yaml:"subaccount_percentage"`
}

func (m *RewardAmount) Reset()         { *m = RewardAmount{} }
func (m *RewardAmount) String() string { return proto.CompactTextString(m) }
func (*RewardAmount) ProtoMessage()    {}
func (*RewardAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_31e6858ad0a3d6b8, []int{1}
}
func (m *RewardAmount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardAmount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardAmount.Merge(m, src)
}
func (m *RewardAmount) XXX_Size() int {
	return m.Size()
}
func (m *RewardAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardAmount.DiscardUnknown(m)
}

var xxx_messageInfo_RewardAmount proto.InternalMessageInfo

func (m *RewardAmount) GetUnlockPeriod() uint64 {
	if m != nil {
		return m.UnlockPeriod
	}
	return 0
}

// RewardByCategory
type RewardByCategory struct {
	// uid is the unique identifier for a reward.
	UID string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid"`
	// addr is the address of the reward receiver.
	Addr string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	// reward_category is the category of the reward.
	RewardCategory RewardCategory `protobuf:"varint,3,opt,name=reward_category,json=rewardCategory,proto3,enum=sgenetwork.sge.reward.RewardCategory" json:"reward_category,omitempty"`
}

func (m *RewardByCategory) Reset()         { *m = RewardByCategory{} }
func (m *RewardByCategory) String() string { return proto.CompactTextString(m) }
func (*RewardByCategory) ProtoMessage()    {}
func (*RewardByCategory) Descriptor() ([]byte, []int) {
	return fileDescriptor_31e6858ad0a3d6b8, []int{2}
}
func (m *RewardByCategory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardByCategory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardByCategory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardByCategory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardByCategory.Merge(m, src)
}
func (m *RewardByCategory) XXX_Size() int {
	return m.Size()
}
func (m *RewardByCategory) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardByCategory.DiscardUnknown(m)
}

var xxx_messageInfo_RewardByCategory proto.InternalMessageInfo

func (m *RewardByCategory) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *RewardByCategory) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *RewardByCategory) GetRewardCategory() RewardCategory {
	if m != nil {
		return m.RewardCategory
	}
	return RewardCategory_REWARD_CATEGORY_UNSPECIFIED
}

// RewardByCampaign
type RewardByCampaign struct {
	// uid is the unique identifier for a reward.
	UID string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid"`
	// campaign_uid is the unique identifier of the campaign.
	CampaignUID string `protobuf:"bytes,2,opt,name=campaign_uid,proto3" json:"campaign_uid"`
}

func (m *RewardByCampaign) Reset()         { *m = RewardByCampaign{} }
func (m *RewardByCampaign) String() string { return proto.CompactTextString(m) }
func (*RewardByCampaign) ProtoMessage()    {}
func (*RewardByCampaign) Descriptor() ([]byte, []int) {
	return fileDescriptor_31e6858ad0a3d6b8, []int{3}
}
func (m *RewardByCampaign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardByCampaign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardByCampaign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardByCampaign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardByCampaign.Merge(m, src)
}
func (m *RewardByCampaign) XXX_Size() int {
	return m.Size()
}
func (m *RewardByCampaign) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardByCampaign.DiscardUnknown(m)
}

var xxx_messageInfo_RewardByCampaign proto.InternalMessageInfo

func (m *RewardByCampaign) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *RewardByCampaign) GetCampaignUID() string {
	if m != nil {
		return m.CampaignUID
	}
	return ""
}

func init() {
	proto.RegisterEnum("sgenetwork.sge.reward.RewardCategory", RewardCategory_name, RewardCategory_value)
	proto.RegisterEnum("sgenetwork.sge.reward.RewardType", RewardType_name, RewardType_value)
	proto.RegisterEnum("sgenetwork.sge.reward.RewardAmountType", RewardAmountType_name, RewardAmountType_value)
	proto.RegisterType((*Reward)(nil), "sgenetwork.sge.reward.Reward")
	proto.RegisterType((*RewardAmount)(nil), "sgenetwork.sge.reward.RewardAmount")
	proto.RegisterType((*RewardByCategory)(nil), "sgenetwork.sge.reward.RewardByCategory")
	proto.RegisterType((*RewardByCampaign)(nil), "sgenetwork.sge.reward.RewardByCampaign")
}

func init() {
	proto.RegisterFile("sgenetwork/sge/reward/reward.proto", fileDescriptor_31e6858ad0a3d6b8)
}

var fileDescriptor_31e6858ad0a3d6b8 = []byte{
	// 918 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xcf, 0x8f, 0xdb, 0x44,
	0x14, 0x5e, 0x27, 0xd9, 0x5f, 0xaf, 0xdb, 0xc5, 0x3b, 0x6c, 0xda, 0x6c, 0x76, 0x1b, 0x6f, 0x8d,
	0x40, 0x65, 0xc5, 0x3a, 0xd2, 0xc2, 0x05, 0x7a, 0x72, 0x1c, 0x27, 0x58, 0xda, 0x26, 0xd1, 0xc4,
	0x11, 0x94, 0x4b, 0xe4, 0xb5, 0x07, 0x37, 0xca, 0x26, 0x8e, 0x6c, 0x87, 0x92, 0x33, 0x12, 0xe2,
	0xc8, 0x05, 0x89, 0x7f, 0x80, 0x7f, 0x00, 0x71, 0xe5, 0xde, 0x63, 0xc5, 0x09, 0x71, 0xb0, 0x50,
	0xf6, 0xd6, 0x63, 0xff, 0x02, 0xe4, 0x19, 0x27, 0x19, 0xbb, 0x11, 0x5b, 0xb8, 0x24, 0x9e, 0xf7,
	0x7d, 0x6f, 0xde, 0x37, 0xdf, 0xcc, 0x1b, 0x0d, 0xc8, 0x81, 0x4b, 0xc6, 0x24, 0x7c, 0xee, 0xf9,
	0xc3, 0x6a, 0xe0, 0x92, 0xaa, 0x4f, 0x9e, 0x5b, 0xbe, 0x93, 0xfc, 0x29, 0x13, 0xdf, 0x0b, 0x3d,
	0x54, 0x5c, 0x71, 0x94, 0xc0, 0x25, 0x0a, 0x03, 0xcb, 0x87, 0xae, 0xe7, 0x7a, 0x94, 0x51, 0x8d,
	0xbf, 0x18, 0xb9, 0x7c, 0x64, 0x7b, 0xc1, 0xc8, 0x0b, 0xfa, 0x0c, 0x60, 0x03, 0x06, 0xc9, 0x3f,
	0xe7, 0x61, 0x0b, 0xd3, 0x5c, 0x74, 0x0a, 0xf9, 0xe9, 0xc0, 0x29, 0x09, 0xa7, 0xc2, 0xa3, 0xdd,
	0xda, 0xfe, 0x3c, 0x92, 0xf2, 0x3d, 0xa3, 0xfe, 0x2a, 0x92, 0xe2, 0x28, 0x8e, 0x7f, 0xd0, 0x05,
	0x6c, 0xdb, 0x3e, 0xb1, 0x42, 0xcf, 0x2f, 0xe5, 0x28, 0xab, 0xf4, 0xc7, 0x6f, 0xe7, 0x87, 0xc9,
	0x7c, 0xaa, 0xe3, 0xf8, 0x24, 0x08, 0xba, 0xa1, 0x3f, 0x18, 0xbb, 0x78, 0x41, 0x44, 0x9f, 0xc0,
	0x8e, 0x4f, 0x6c, 0x32, 0xf8, 0x86, 0xf8, 0xa5, 0xfc, 0x2d, 0x49, 0x4b, 0x26, 0xd2, 0x60, 0xcf,
	0xb6, 0x46, 0x13, 0x6b, 0xe0, 0x8e, 0xfb, 0xb1, 0xa8, 0x02, 0xcd, 0x94, 0xe6, 0x91, 0x74, 0x47,
	0x4b, 0xe2, 0x4c, 0x5c, 0x8a, 0x86, 0x53, 0x23, 0x74, 0x0d, 0x77, 0x99, 0x2d, 0x7d, 0x6b, 0xe4,
	0x4d, 0xc7, 0x61, 0x69, 0xfb, 0x54, 0x78, 0x74, 0xe7, 0xe2, 0x3d, 0x65, 0xad, 0x77, 0x0a, 0xb3,
	0x41, 0xa5, 0xd4, 0xda, 0xc3, 0x79, 0x24, 0xed, 0xf1, 0x91, 0x57, 0x91, 0x94, 0x9e, 0x0d, 0xa7,
	0x87, 0xe8, 0x31, 0x40, 0xe0, 0x4d, 0x7d, 0x9b, 0x50, 0xc1, 0x3b, 0x54, 0xf0, 0xf1, 0x3c, 0x92,
	0x76, 0xbb, 0x34, 0xca, 0xe4, 0x72, 0x14, 0xcc, 0x7d, 0x23, 0x04, 0x85, 0x11, 0x09, 0xad, 0xd2,
	0x5e, 0x9c, 0x86, 0xe9, 0xb7, 0xfc, 0x7b, 0x01, 0x52, 0x0a, 0xd0, 0x10, 0xde, 0x1d, 0x59, 0x83,
	0x71, 0xdf, 0xb2, 0xed, 0x78, 0xbc, 0x58, 0x15, 0xdb, 0xb0, 0xc7, 0x2f, 0x22, 0x69, 0xe3, 0xaf,
	0x48, 0x2a, 0x32, 0x67, 0x03, 0x67, 0xa8, 0x0c, 0xbc, 0xea, 0xc8, 0x0a, 0x9f, 0x29, 0xc6, 0x38,
	0x7c, 0x1d, 0x49, 0xe5, 0x99, 0x35, 0xba, 0xfe, 0x4c, 0x5e, 0x33, 0x83, 0x8c, 0x0f, 0xe2, 0xa8,
	0xca, 0x82, 0x49, 0xb1, 0xaf, 0xe1, 0x20, 0x98, 0x5e, 0x65, 0x4a, 0xb1, 0x5d, 0xff, 0xf4, 0xb6,
	0x52, 0x25, 0x56, 0xea, 0x8d, 0x7c, 0x19, 0x8b, 0xab, 0x58, 0x52, 0xa7, 0x09, 0x77, 0xa7, 0xe3,
	0x6b, 0xcf, 0x1e, 0xf6, 0x27, 0xc4, 0x1f, 0x78, 0x0e, 0x3d, 0x24, 0x05, 0xe6, 0x7f, 0x8f, 0x02,
	0x1d, 0x1a, 0x8f, 0xfd, 0x4f, 0x11, 0x71, 0x7a, 0x88, 0x7e, 0x10, 0xe0, 0x7e, 0x6a, 0x71, 0x13,
	0xe2, 0xdb, 0x64, 0x1c, 0x5a, 0x2e, 0x49, 0x8e, 0x4f, 0x27, 0xd1, 0xfd, 0x81, 0x3b, 0x08, 0x9f,
	0x4d, 0xaf, 0x14, 0xdb, 0x1b, 0x25, 0xcd, 0x90, 0xfc, 0x9d, 0x07, 0xce, 0xb0, 0x1a, 0xce, 0x26,
	0x24, 0x50, 0xea, 0xc4, 0x7e, 0x1d, 0x49, 0x95, 0x35, 0x9e, 0xad, 0xa6, 0x95, 0x71, 0x91, 0xf3,
	0xad, 0xb3, 0x8c, 0xa3, 0xef, 0x04, 0x28, 0x72, 0x8b, 0xe7, 0x84, 0x6c, 0x52, 0x21, 0xad, 0xff,
	0x2c, 0xe4, 0xe4, 0x0d, 0x47, 0x79, 0x19, 0x87, 0xab, 0xf8, 0x4a, 0x85, 0xfc, 0xab, 0x00, 0x22,
	0x3b, 0x3f, 0xb5, 0x99, 0x66, 0x85, 0xc4, 0xf5, 0xfc, 0xd9, 0x5b, 0x34, 0xf9, 0x47, 0x50, 0xb0,
	0x1c, 0xe7, 0xf6, 0x0e, 0xa7, 0x2c, 0xd4, 0x82, 0x77, 0x92, 0x36, 0xb0, 0x93, 0x12, 0x74, 0x03,
	0xf7, 0x2f, 0xde, 0xff, 0xd7, 0x2e, 0x5b, 0xe8, 0xc1, 0xfb, 0x7e, 0x6a, 0x2c, 0xcf, 0x78, 0xcd,
	0xac, 0x97, 0xdf, 0x42, 0x73, 0xf6, 0xba, 0xc8, 0xfd, 0x8f, 0xeb, 0xe2, 0xec, 0xfb, 0x1c, 0xec,
	0xa7, 0xd5, 0x21, 0x09, 0x8e, 0xb1, 0xfe, 0x85, 0x8a, 0xeb, 0x7d, 0x4d, 0x35, 0xf5, 0x66, 0x1b,
	0x3f, 0xed, 0xf7, 0x5a, 0xdd, 0x8e, 0xae, 0x19, 0x0d, 0x43, 0xaf, 0x8b, 0x1b, 0xa8, 0x0c, 0xf7,
	0xb2, 0x84, 0xae, 0xd1, 0x6c, 0xf5, 0x3a, 0xa2, 0x80, 0x4e, 0xa0, 0x94, 0xc5, 0xb0, 0xde, 0xd0,
	0x31, 0x56, 0x2f, 0xc5, 0x1c, 0x7a, 0x00, 0x47, 0x59, 0x54, 0x6d, 0x34, 0x8c, 0x4b, 0x43, 0x35,
	0x75, 0x31, 0x8f, 0x2a, 0x50, 0xce, 0xc2, 0x35, 0xdd, 0x8c, 0x27, 0xe8, 0xb5, 0xea, 0x62, 0x61,
	0x5d, 0xfa, 0x13, 0xe3, 0x52, 0xef, 0x9a, 0xed, 0x96, 0x2e, 0x6e, 0xa2, 0x53, 0x38, 0x59, 0x97,
	0x5e, 0x37, 0xba, 0x5a, 0xbb, 0xd7, 0x32, 0xc5, 0x2d, 0x74, 0x04, 0xc5, 0x2c, 0xa3, 0x6d, 0x7e,
	0xae, 0x63, 0x71, 0xfb, 0xec, 0x97, 0x1c, 0x00, 0x33, 0xc2, 0x9c, 0x4d, 0x08, 0x3a, 0x86, 0xfb,
	0x09, 0xd3, 0x7c, 0xda, 0xd1, 0x33, 0x06, 0xdc, 0x03, 0xc4, 0x83, 0xcb, 0xc5, 0xaf, 0x9c, 0xa3,
	0xf1, 0xc5, 0xc2, 0x17, 0x84, 0x1c, 0xa7, 0x90, 0x12, 0x96, 0x6b, 0x5f, 0x30, 0xf2, 0xa8, 0x04,
	0x87, 0xeb, 0xa6, 0x10, 0x0b, 0x9c, 0xf6, 0x74, 0xae, 0xb8, 0xc9, 0x6d, 0x08, 0x85, 0x38, 0xcf,
	0xb6, 0xb2, 0x69, 0x2b, 0xbf, 0xb6, 0xb9, 0xbd, 0x5a, 0xa6, 0x2d, 0xbd, 0xda, 0x41, 0x45, 0x38,
	0xe0, 0x51, 0xe6, 0xd3, 0xee, 0xd9, 0x4f, 0xcb, 0x06, 0x63, 0x77, 0x19, 0x75, 0x4b, 0x86, 0x4a,
	0xc2, 0x55, 0x9f, 0xc4, 0xe9, 0xeb, 0x4c, 0x5b, 0x55, 0xe3, 0x39, 0x0d, 0xe3, 0x4b, 0xbd, 0x9e,
	0x3a, 0x37, 0x3c, 0x7a, 0xd9, 0x6e, 0x1a, 0x9a, 0x98, 0x43, 0x0f, 0xe1, 0xc1, 0x1a, 0xb4, 0xa3,
	0x63, 0x4d, 0x6f, 0x99, 0x6a, 0x53, 0x17, 0xf3, 0x35, 0xed, 0xc5, 0xbc, 0x22, 0xbc, 0x9c, 0x57,
	0x84, 0xbf, 0xe7, 0x15, 0xe1, 0xc7, 0x9b, 0xca, 0xc6, 0xcb, 0x9b, 0xca, 0xc6, 0x9f, 0x37, 0x95,
	0x8d, 0xaf, 0x3e, 0xe4, 0x2e, 0x9c, 0xc0, 0x25, 0xe7, 0xfc, 0x2b, 0xe3, 0xdb, 0xc5, 0x3b, 0x83,
	0xde, 0x3b, 0x57, 0x5b, 0xf4, 0x7d, 0xf0, 0xf1, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x5a,
	0x1b, 0x29, 0x8d, 0x08, 0x00, 0x00,
}

func (m *Reward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Reward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Meta) > 0 {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintReward(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.SourceUID) > 0 {
		i -= len(m.SourceUID)
		copy(dAtA[i:], m.SourceUID)
		i = encodeVarintReward(dAtA, i, uint64(len(m.SourceUID)))
		i--
		dAtA[i] = 0x42
	}
	if m.RewardAmount != nil {
		{
			size, err := m.RewardAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReward(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CampaignUID) > 0 {
		i -= len(m.CampaignUID)
		copy(dAtA[i:], m.CampaignUID)
		i = encodeVarintReward(dAtA, i, uint64(len(m.CampaignUID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintReward(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintReward(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UID) > 0 {
		i -= len(m.UID)
		copy(dAtA[i:], m.UID)
		i = encodeVarintReward(dAtA, i, uint64(len(m.UID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardAmount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardAmount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SubaccountPercentage.Size()
		i -= size
		if _, err := m.SubaccountPercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.MainAccountPercentage.Size()
		i -= size
		if _, err := m.MainAccountPercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.UnlockPeriod != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.UnlockPeriod))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.SubaccountAmount.Size()
		i -= size
		if _, err := m.SubaccountAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.MainAccountAmount.Size()
		i -= size
		if _, err := m.MainAccountAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RewardByCategory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardByCategory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardByCategory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RewardCategory != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.RewardCategory))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintReward(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UID) > 0 {
		i -= len(m.UID)
		copy(dAtA[i:], m.UID)
		i = encodeVarintReward(dAtA, i, uint64(len(m.UID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardByCampaign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardByCampaign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardByCampaign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CampaignUID) > 0 {
		i -= len(m.CampaignUID)
		copy(dAtA[i:], m.CampaignUID)
		i = encodeVarintReward(dAtA, i, uint64(len(m.CampaignUID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UID) > 0 {
		i -= len(m.UID)
		copy(dAtA[i:], m.UID)
		i = encodeVarintReward(dAtA, i, uint64(len(m.UID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintReward(dAtA []byte, offset int, v uint64) int {
	offset -= sovReward(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Reward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.CampaignUID)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	if m.RewardAmount != nil {
		l = m.RewardAmount.Size()
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.SourceUID)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.Meta)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	return n
}

func (m *RewardAmount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MainAccountAmount.Size()
	n += 1 + l + sovReward(uint64(l))
	l = m.SubaccountAmount.Size()
	n += 1 + l + sovReward(uint64(l))
	if m.UnlockPeriod != 0 {
		n += 1 + sovReward(uint64(m.UnlockPeriod))
	}
	l = m.MainAccountPercentage.Size()
	n += 1 + l + sovReward(uint64(l))
	l = m.SubaccountPercentage.Size()
	n += 1 + l + sovReward(uint64(l))
	return n
}

func (m *RewardByCategory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	if m.RewardCategory != 0 {
		n += 1 + sovReward(uint64(m.RewardCategory))
	}
	return n
}

func (m *RewardByCampaign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.CampaignUID)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	return n
}

func sovReward(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReward(x uint64) (n int) {
	return sovReward(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Reward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampaignUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RewardAmount == nil {
				m.RewardAmount = &RewardAmount{}
			}
			if err := m.RewardAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainAccountAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MainAccountAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SubaccountAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockPeriod", wireType)
			}
			m.UnlockPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnlockPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainAccountPercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MainAccountPercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountPercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SubaccountPercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardByCategory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardByCategory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardByCategory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardCategory", wireType)
			}
			m.RewardCategory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardCategory |= RewardCategory(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardByCampaign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardByCampaign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardByCampaign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampaignUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReward(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReward
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReward
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReward
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReward
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReward        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReward          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReward = fmt.Errorf("proto: unexpected end of group")
)
