// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sge/reward/ticket.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CreateCampaignPayload is the type for campaign creation payload.
type CreateCampaignPayload struct {
	// promoter is the address of campaign promoter.
	// Funds for the campaign would be deducted from this account.
	Promoter string `protobuf:"bytes,1,opt,name=promoter,proto3" json:"promoter,omitempty"`
	// start_ts is the start timestamp of the campaign.
	StartTs uint64 `protobuf:"varint,2,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	// end_ts is the end timestamp of the campaign.
	EndTs uint64 `protobuf:"varint,3,opt,name=end_ts,json=endTs,proto3" json:"end_ts,omitempty"`
	// category is the category of the campaign.
	Category RewardCategory `protobuf:"varint,4,opt,name=category,proto3,enum=sgenetwork.sge.reward.RewardCategory" json:"category,omitempty"`
	// reward_type is the type of reward.
	RewardType RewardType `protobuf:"varint,5,opt,name=reward_type,json=rewardType,proto3,enum=sgenetwork.sge.reward.RewardType" json:"reward_type,omitempty"`
	// Reward amount
	RewardAmountType RewardAmountType `protobuf:"varint,6,opt,name=reward_amount_type,json=rewardAmountType,proto3,enum=sgenetwork.sge.reward.RewardAmountType" json:"reward_amount_type,omitempty"`
	// reward_amount is the amount of reward.
	RewardAmount *RewardAmount `protobuf:"bytes,7,opt,name=reward_amount,json=rewardAmount,proto3" json:"reward_amount,omitempty"`
	// is_active is the flag to check if the campaign is active or not.
	IsActive bool `protobuf:"varint,8,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// claims_per_category is the number of times a user can claim a reward for
	// category of this campaign.
	ClaimsPerCategory uint64 `protobuf:"varint,9,opt,name=claims_per_category,json=claimsPerCategory,proto3" json:"claims_per_category,omitempty"`
	// meta is the metadata of the campaign.
	// It is a stringified base64 encoded json.
	Meta string `protobuf:"bytes,10,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (m *CreateCampaignPayload) Reset()         { *m = CreateCampaignPayload{} }
func (m *CreateCampaignPayload) String() string { return proto.CompactTextString(m) }
func (*CreateCampaignPayload) ProtoMessage()    {}
func (*CreateCampaignPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d710bc1249ca8ae, []int{0}
}
func (m *CreateCampaignPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateCampaignPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateCampaignPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateCampaignPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCampaignPayload.Merge(m, src)
}
func (m *CreateCampaignPayload) XXX_Size() int {
	return m.Size()
}
func (m *CreateCampaignPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCampaignPayload.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCampaignPayload proto.InternalMessageInfo

func (m *CreateCampaignPayload) GetPromoter() string {
	if m != nil {
		return m.Promoter
	}
	return ""
}

func (m *CreateCampaignPayload) GetStartTs() uint64 {
	if m != nil {
		return m.StartTs
	}
	return 0
}

func (m *CreateCampaignPayload) GetEndTs() uint64 {
	if m != nil {
		return m.EndTs
	}
	return 0
}

func (m *CreateCampaignPayload) GetCategory() RewardCategory {
	if m != nil {
		return m.Category
	}
	return RewardCategory_REWARD_CATEGORY_UNSPECIFIED
}

func (m *CreateCampaignPayload) GetRewardType() RewardType {
	if m != nil {
		return m.RewardType
	}
	return RewardType_REWARD_TYPE_UNSPECIFIED
}

func (m *CreateCampaignPayload) GetRewardAmountType() RewardAmountType {
	if m != nil {
		return m.RewardAmountType
	}
	return RewardAmountType_REWARD_AMOUNT_TYPE_UNSPECIFIED
}

func (m *CreateCampaignPayload) GetRewardAmount() *RewardAmount {
	if m != nil {
		return m.RewardAmount
	}
	return nil
}

func (m *CreateCampaignPayload) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *CreateCampaignPayload) GetClaimsPerCategory() uint64 {
	if m != nil {
		return m.ClaimsPerCategory
	}
	return 0
}

func (m *CreateCampaignPayload) GetMeta() string {
	if m != nil {
		return m.Meta
	}
	return ""
}

// UpdateCampaignPayload is the type for campaign update payload.
type UpdateCampaignPayload struct {
	// end_ts is the end timestamp of the campaign.
	EndTs uint64 `protobuf:"varint,1,opt,name=end_ts,json=endTs,proto3" json:"end_ts,omitempty"`
	// is_active is the flag to check if the campaign is active or not.
	IsActive bool `protobuf:"varint,2,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (m *UpdateCampaignPayload) Reset()         { *m = UpdateCampaignPayload{} }
func (m *UpdateCampaignPayload) String() string { return proto.CompactTextString(m) }
func (*UpdateCampaignPayload) ProtoMessage()    {}
func (*UpdateCampaignPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d710bc1249ca8ae, []int{1}
}
func (m *UpdateCampaignPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCampaignPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCampaignPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateCampaignPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCampaignPayload.Merge(m, src)
}
func (m *UpdateCampaignPayload) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCampaignPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCampaignPayload.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCampaignPayload proto.InternalMessageInfo

func (m *UpdateCampaignPayload) GetEndTs() uint64 {
	if m != nil {
		return m.EndTs
	}
	return 0
}

func (m *UpdateCampaignPayload) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

// WithdrawFundsPayload is the type for campaign withdraw funds payload.
type WithdrawFundsPayload struct {
	// promoter is the address of campaign promoter.
	// Funds would be transferred to this account.
	Promoter string `protobuf:"bytes,1,opt,name=promoter,proto3" json:"promoter,omitempty"`
}

func (m *WithdrawFundsPayload) Reset()         { *m = WithdrawFundsPayload{} }
func (m *WithdrawFundsPayload) String() string { return proto.CompactTextString(m) }
func (*WithdrawFundsPayload) ProtoMessage()    {}
func (*WithdrawFundsPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d710bc1249ca8ae, []int{2}
}
func (m *WithdrawFundsPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawFundsPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawFundsPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawFundsPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawFundsPayload.Merge(m, src)
}
func (m *WithdrawFundsPayload) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawFundsPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawFundsPayload.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawFundsPayload proto.InternalMessageInfo

func (m *WithdrawFundsPayload) GetPromoter() string {
	if m != nil {
		return m.Promoter
	}
	return ""
}

// RewardPayloadCommon
type RewardPayloadCommon struct {
	// receiver is the address of the account that receives the reward.
	Receiver string `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// source_uid is the address of the source.
	// It is used to identify the source of the reward.
	// For example, the source uid of a referral signup reward is the address of
	// the referer.
	SourceUID string `protobuf:"bytes,2,opt,name=source_uid,proto3" json:"source_uid"`
	// meta is the metadata of the campaign.
	// It is a stringified base64 encoded json.
	Meta string `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (m *RewardPayloadCommon) Reset()         { *m = RewardPayloadCommon{} }
func (m *RewardPayloadCommon) String() string { return proto.CompactTextString(m) }
func (*RewardPayloadCommon) ProtoMessage()    {}
func (*RewardPayloadCommon) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d710bc1249ca8ae, []int{3}
}
func (m *RewardPayloadCommon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardPayloadCommon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardPayloadCommon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardPayloadCommon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardPayloadCommon.Merge(m, src)
}
func (m *RewardPayloadCommon) XXX_Size() int {
	return m.Size()
}
func (m *RewardPayloadCommon) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardPayloadCommon.DiscardUnknown(m)
}

var xxx_messageInfo_RewardPayloadCommon proto.InternalMessageInfo

func (m *RewardPayloadCommon) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *RewardPayloadCommon) GetSourceUID() string {
	if m != nil {
		return m.SourceUID
	}
	return ""
}

func (m *RewardPayloadCommon) GetMeta() string {
	if m != nil {
		return m.Meta
	}
	return ""
}

// GrantSignupRewardPayload is the type for signup reward grant payload.
type GrantSignupRewardPayload struct {
	// common is the common properties of a reward
	Common RewardPayloadCommon `protobuf:"bytes,1,opt,name=common,proto3" json:"common"`
}

func (m *GrantSignupRewardPayload) Reset()         { *m = GrantSignupRewardPayload{} }
func (m *GrantSignupRewardPayload) String() string { return proto.CompactTextString(m) }
func (*GrantSignupRewardPayload) ProtoMessage()    {}
func (*GrantSignupRewardPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d710bc1249ca8ae, []int{4}
}
func (m *GrantSignupRewardPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GrantSignupRewardPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GrantSignupRewardPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GrantSignupRewardPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrantSignupRewardPayload.Merge(m, src)
}
func (m *GrantSignupRewardPayload) XXX_Size() int {
	return m.Size()
}
func (m *GrantSignupRewardPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_GrantSignupRewardPayload.DiscardUnknown(m)
}

var xxx_messageInfo_GrantSignupRewardPayload proto.InternalMessageInfo

func (m *GrantSignupRewardPayload) GetCommon() RewardPayloadCommon {
	if m != nil {
		return m.Common
	}
	return RewardPayloadCommon{}
}

// GrantSignupReferreeRewardPayload is the type for signup referrer reward grant
// payload.
type GrantSignupReferreeRewardPayload struct {
	// common is the common properties of a reward
	Common RewardPayloadCommon `protobuf:"bytes,1,opt,name=common,proto3" json:"common"`
}

func (m *GrantSignupReferreeRewardPayload) Reset()         { *m = GrantSignupReferreeRewardPayload{} }
func (m *GrantSignupReferreeRewardPayload) String() string { return proto.CompactTextString(m) }
func (*GrantSignupReferreeRewardPayload) ProtoMessage()    {}
func (*GrantSignupReferreeRewardPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d710bc1249ca8ae, []int{5}
}
func (m *GrantSignupReferreeRewardPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GrantSignupReferreeRewardPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GrantSignupReferreeRewardPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GrantSignupReferreeRewardPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrantSignupReferreeRewardPayload.Merge(m, src)
}
func (m *GrantSignupReferreeRewardPayload) XXX_Size() int {
	return m.Size()
}
func (m *GrantSignupReferreeRewardPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_GrantSignupReferreeRewardPayload.DiscardUnknown(m)
}

var xxx_messageInfo_GrantSignupReferreeRewardPayload proto.InternalMessageInfo

func (m *GrantSignupReferreeRewardPayload) GetCommon() RewardPayloadCommon {
	if m != nil {
		return m.Common
	}
	return RewardPayloadCommon{}
}

func init() {
	proto.RegisterType((*CreateCampaignPayload)(nil), "sgenetwork.sge.reward.CreateCampaignPayload")
	proto.RegisterType((*UpdateCampaignPayload)(nil), "sgenetwork.sge.reward.UpdateCampaignPayload")
	proto.RegisterType((*WithdrawFundsPayload)(nil), "sgenetwork.sge.reward.WithdrawFundsPayload")
	proto.RegisterType((*RewardPayloadCommon)(nil), "sgenetwork.sge.reward.RewardPayloadCommon")
	proto.RegisterType((*GrantSignupRewardPayload)(nil), "sgenetwork.sge.reward.GrantSignupRewardPayload")
	proto.RegisterType((*GrantSignupReferreeRewardPayload)(nil), "sgenetwork.sge.reward.GrantSignupReferreeRewardPayload")
}

func init() { proto.RegisterFile("sge/reward/ticket.proto", fileDescriptor_5d710bc1249ca8ae) }

var fileDescriptor_5d710bc1249ca8ae = []byte{
	// 550 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xe3, 0x36, 0x4d, 0x9d, 0x29, 0x20, 0xd8, 0x36, 0xc2, 0xa4, 0x92, 0x63, 0x82, 0x10,
	0x01, 0x09, 0x47, 0x0a, 0x47, 0x4e, 0x49, 0x10, 0x14, 0x71, 0xa9, 0xdc, 0x44, 0x48, 0x5c, 0xac,
	0xad, 0x3d, 0xb8, 0x56, 0x63, 0xaf, 0xb5, 0xbb, 0x6e, 0xc8, 0x95, 0x27, 0xe0, 0xb1, 0x7a, 0xec,
	0x91, 0x53, 0x84, 0x92, 0x1b, 0x07, 0x9e, 0x01, 0x65, 0x9d, 0xba, 0x36, 0xaa, 0xa2, 0x5e, 0x38,
	0xed, 0xcc, 0xce, 0x3f, 0xdf, 0xce, 0xce, 0xac, 0x16, 0x1e, 0x8b, 0x00, 0xbb, 0x1c, 0xa7, 0x94,
	0xfb, 0x5d, 0x19, 0x7a, 0xe7, 0x28, 0xed, 0x84, 0x33, 0xc9, 0x48, 0x43, 0x04, 0x18, 0xa3, 0x9c,
	0x32, 0x7e, 0x6e, 0x8b, 0x00, 0xed, 0x4c, 0xd3, 0x3c, 0x08, 0x58, 0xc0, 0x94, 0xa2, 0xbb, 0xb2,
	0x32, 0x71, 0xb3, 0x48, 0xc9, 0x96, 0x2c, 0xd0, 0xfe, 0xb3, 0x0d, 0x8d, 0x21, 0x47, 0x2a, 0x71,
	0x48, 0xa3, 0x84, 0x86, 0x41, 0x7c, 0x4c, 0x67, 0x13, 0x46, 0x7d, 0xd2, 0x04, 0x3d, 0xe1, 0x2c,
	0x62, 0x12, 0xb9, 0xa1, 0x59, 0x5a, 0xa7, 0xee, 0xe4, 0x3e, 0x79, 0x02, 0xba, 0x90, 0x94, 0x4b,
	0x57, 0x0a, 0x63, 0xcb, 0xd2, 0x3a, 0x55, 0x67, 0x57, 0xf9, 0x23, 0x41, 0x1a, 0x50, 0xc3, 0xd8,
	0x5f, 0x05, 0xb6, 0x55, 0x60, 0x07, 0x63, 0x7f, 0x24, 0x48, 0x1f, 0x74, 0x8f, 0x4a, 0x0c, 0x18,
	0x9f, 0x19, 0x55, 0x4b, 0xeb, 0x3c, 0xe8, 0x3d, 0xb7, 0x6f, 0xbd, 0x80, 0xed, 0xa8, 0x65, 0xb8,
	0x16, 0x3b, 0x79, 0x1a, 0x19, 0xc0, 0x5e, 0x26, 0x71, 0xe5, 0x2c, 0x41, 0x63, 0x47, 0x51, 0x9e,
	0x6e, 0xa4, 0x8c, 0x66, 0x09, 0x3a, 0xc0, 0x73, 0x9b, 0x8c, 0x81, 0xac, 0x19, 0x34, 0x62, 0x69,
	0x2c, 0x33, 0x54, 0x4d, 0xa1, 0x5e, 0x6c, 0x44, 0xf5, 0x95, 0x5e, 0x01, 0x1f, 0xf2, 0x7f, 0x76,
	0xc8, 0x11, 0xdc, 0x2f, 0x61, 0x8d, 0x5d, 0x4b, 0xeb, 0xec, 0xf5, 0x9e, 0xdd, 0x81, 0xe8, 0xdc,
	0x2b, 0xd2, 0xc8, 0x21, 0xd4, 0x43, 0xe1, 0x52, 0x4f, 0x86, 0x17, 0x68, 0xe8, 0x96, 0xd6, 0xd1,
	0x1d, 0x3d, 0x14, 0x7d, 0xe5, 0x13, 0x1b, 0xf6, 0xbd, 0x09, 0x0d, 0x23, 0xe1, 0x26, 0xc8, 0xdd,
	0xbc, 0x9f, 0x75, 0xd5, 0xe8, 0x47, 0x59, 0xe8, 0x18, 0xf9, 0x75, 0xef, 0x08, 0x81, 0x6a, 0x84,
	0x92, 0x1a, 0xa0, 0xc6, 0xa7, 0xec, 0xf6, 0x27, 0x68, 0x8c, 0x13, 0xff, 0x96, 0x79, 0xdf, 0x0c,
	0x4e, 0x2b, 0x0e, 0xae, 0x54, 0xd0, 0x56, 0xb9, 0xa0, 0x76, 0x0f, 0x0e, 0x3e, 0x87, 0xf2, 0xcc,
	0xe7, 0x74, 0xfa, 0x3e, 0x8d, 0x7d, 0x71, 0x87, 0xb7, 0xd3, 0xfe, 0xae, 0xc1, 0x7e, 0xd6, 0x80,
	0xb5, 0x7a, 0xc8, 0xa2, 0x88, 0xc5, 0xab, 0x1c, 0x8e, 0x1e, 0x86, 0x17, 0x37, 0x39, 0xd7, 0x3e,
	0x79, 0x0b, 0x20, 0x58, 0xca, 0x3d, 0x74, 0xd3, 0xd0, 0x57, 0x55, 0xd4, 0x07, 0x87, 0x8b, 0x79,
	0xab, 0x7e, 0xa2, 0x76, 0xc7, 0x1f, 0xdf, 0xfd, 0x9e, 0xb7, 0x0a, 0x12, 0xa7, 0x60, 0xe7, 0x5d,
	0xd8, 0x2e, 0x74, 0xc1, 0x07, 0xe3, 0x03, 0xa7, 0xb1, 0x3c, 0x09, 0x83, 0x38, 0x4d, 0x4a, 0xe5,
	0x90, 0x23, 0xa8, 0x79, 0xaa, 0x24, 0x55, 0xc6, 0x5e, 0xef, 0xd5, 0xc6, 0x29, 0x96, 0x2e, 0x31,
	0xa8, 0x5e, 0xce, 0x5b, 0x15, 0x67, 0x9d, 0xdf, 0x9e, 0x80, 0x55, 0x3a, 0xe5, 0x2b, 0x72, 0x8e,
	0xf8, 0x9f, 0x4e, 0x1b, 0x0c, 0x2f, 0x17, 0xa6, 0x76, 0xb5, 0x30, 0xb5, 0x5f, 0x0b, 0x53, 0xfb,
	0xb1, 0x34, 0x2b, 0x57, 0x4b, 0xb3, 0xf2, 0x73, 0x69, 0x56, 0xbe, 0xbc, 0x0c, 0x42, 0x79, 0x96,
	0x9e, 0xda, 0x1e, 0x8b, 0xba, 0x22, 0xc0, 0xd7, 0x6b, 0xfc, 0xca, 0xee, 0x7e, 0xcb, 0x3f, 0x97,
	0x59, 0x82, 0xe2, 0xb4, 0xa6, 0xbe, 0x85, 0x37, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x3d, 0xdb,
	0x7a, 0x85, 0x77, 0x04, 0x00, 0x00,
}

func (m *CreateCampaignPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCampaignPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateCampaignPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Meta) > 0 {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintTicket(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x52
	}
	if m.ClaimsPerCategory != 0 {
		i = encodeVarintTicket(dAtA, i, uint64(m.ClaimsPerCategory))
		i--
		dAtA[i] = 0x48
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.RewardAmount != nil {
		{
			size, err := m.RewardAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTicket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.RewardAmountType != 0 {
		i = encodeVarintTicket(dAtA, i, uint64(m.RewardAmountType))
		i--
		dAtA[i] = 0x30
	}
	if m.RewardType != 0 {
		i = encodeVarintTicket(dAtA, i, uint64(m.RewardType))
		i--
		dAtA[i] = 0x28
	}
	if m.Category != 0 {
		i = encodeVarintTicket(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x20
	}
	if m.EndTs != 0 {
		i = encodeVarintTicket(dAtA, i, uint64(m.EndTs))
		i--
		dAtA[i] = 0x18
	}
	if m.StartTs != 0 {
		i = encodeVarintTicket(dAtA, i, uint64(m.StartTs))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Promoter) > 0 {
		i -= len(m.Promoter)
		copy(dAtA[i:], m.Promoter)
		i = encodeVarintTicket(dAtA, i, uint64(len(m.Promoter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateCampaignPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCampaignPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateCampaignPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.EndTs != 0 {
		i = encodeVarintTicket(dAtA, i, uint64(m.EndTs))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawFundsPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawFundsPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawFundsPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Promoter) > 0 {
		i -= len(m.Promoter)
		copy(dAtA[i:], m.Promoter)
		i = encodeVarintTicket(dAtA, i, uint64(len(m.Promoter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardPayloadCommon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardPayloadCommon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardPayloadCommon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Meta) > 0 {
		i -= len(m.Meta)
		copy(dAtA[i:], m.Meta)
		i = encodeVarintTicket(dAtA, i, uint64(len(m.Meta)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SourceUID) > 0 {
		i -= len(m.SourceUID)
		copy(dAtA[i:], m.SourceUID)
		i = encodeVarintTicket(dAtA, i, uint64(len(m.SourceUID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTicket(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GrantSignupRewardPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrantSignupRewardPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GrantSignupRewardPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Common.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTicket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GrantSignupReferreeRewardPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrantSignupReferreeRewardPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GrantSignupReferreeRewardPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Common.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTicket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTicket(dAtA []byte, offset int, v uint64) int {
	offset -= sovTicket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateCampaignPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Promoter)
	if l > 0 {
		n += 1 + l + sovTicket(uint64(l))
	}
	if m.StartTs != 0 {
		n += 1 + sovTicket(uint64(m.StartTs))
	}
	if m.EndTs != 0 {
		n += 1 + sovTicket(uint64(m.EndTs))
	}
	if m.Category != 0 {
		n += 1 + sovTicket(uint64(m.Category))
	}
	if m.RewardType != 0 {
		n += 1 + sovTicket(uint64(m.RewardType))
	}
	if m.RewardAmountType != 0 {
		n += 1 + sovTicket(uint64(m.RewardAmountType))
	}
	if m.RewardAmount != nil {
		l = m.RewardAmount.Size()
		n += 1 + l + sovTicket(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	if m.ClaimsPerCategory != 0 {
		n += 1 + sovTicket(uint64(m.ClaimsPerCategory))
	}
	l = len(m.Meta)
	if l > 0 {
		n += 1 + l + sovTicket(uint64(l))
	}
	return n
}

func (m *UpdateCampaignPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EndTs != 0 {
		n += 1 + sovTicket(uint64(m.EndTs))
	}
	if m.IsActive {
		n += 2
	}
	return n
}

func (m *WithdrawFundsPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Promoter)
	if l > 0 {
		n += 1 + l + sovTicket(uint64(l))
	}
	return n
}

func (m *RewardPayloadCommon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTicket(uint64(l))
	}
	l = len(m.SourceUID)
	if l > 0 {
		n += 1 + l + sovTicket(uint64(l))
	}
	l = len(m.Meta)
	if l > 0 {
		n += 1 + l + sovTicket(uint64(l))
	}
	return n
}

func (m *GrantSignupRewardPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Common.Size()
	n += 1 + l + sovTicket(uint64(l))
	return n
}

func (m *GrantSignupReferreeRewardPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Common.Size()
	n += 1 + l + sovTicket(uint64(l))
	return n
}

func sovTicket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTicket(x uint64) (n int) {
	return sovTicket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateCampaignPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTicket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCampaignPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCampaignPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Promoter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTicket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTicket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Promoter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTs", wireType)
			}
			m.StartTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTs", wireType)
			}
			m.EndTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= RewardCategory(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardType", wireType)
			}
			m.RewardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardType |= RewardType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAmountType", wireType)
			}
			m.RewardAmountType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardAmountType |= RewardAmountType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTicket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTicket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RewardAmount == nil {
				m.RewardAmount = &RewardAmount{}
			}
			if err := m.RewardAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimsPerCategory", wireType)
			}
			m.ClaimsPerCategory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimsPerCategory |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTicket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTicket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTicket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTicket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCampaignPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTicket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCampaignPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCampaignPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTs", wireType)
			}
			m.EndTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTicket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTicket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawFundsPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTicket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawFundsPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawFundsPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Promoter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTicket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTicket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Promoter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTicket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTicket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardPayloadCommon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTicket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardPayloadCommon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardPayloadCommon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTicket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTicket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTicket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTicket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTicket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTicket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTicket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTicket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrantSignupRewardPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTicket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrantSignupRewardPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrantSignupRewardPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Common", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTicket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTicket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Common.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTicket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTicket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrantSignupReferreeRewardPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTicket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrantSignupReferreeRewardPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrantSignupReferreeRewardPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Common", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTicket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTicket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Common.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTicket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTicket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTicket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTicket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTicket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTicket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTicket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTicket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTicket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTicket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTicket = fmt.Errorf("proto: unexpected end of group")
)
